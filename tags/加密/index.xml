<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>加密 on ARAE</title><link>https://arae.cc/tags/%E5%8A%A0%E5%AF%86.html</link><description>Recent content in 加密 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Jul 2016 13:09:06 +0800</lastBuildDate><atom:link href="https://arae.cc/tags/%E5%8A%A0%E5%AF%86/index.xml" rel="self" type="application/rss+xml"/><item><title>那些出现在电影中的程序代码</title><link>https://arae.cc/post/25722.html</link><pubDate>Fri, 15 Jul 2016 13:09:06 +0800</pubDate><guid>https://arae.cc/post/25722.html</guid><description>高科技无关的电影也偶尔会出现一些跟计算机相关的镜头。文本搜罗的是在各种电影中出现过的代码，它们有的是黑客脚本，有的是绝密文件，有的就是为了摆酷，文中对这些代码都有截屏，你是否能看出它们是什么语言？ 《钢铁侠》，c语言 最近我重新看了一遍《钢铁侠》，发现了一些有趣的事情。在钢铁侠的人工心脏第一次“初始化启动”期间，在那个“恐怖分子”的洞穴里，一些长长短短的C语言代码出现在那个伪造的笔记本电脑屏幕上。 屏幕上的这些代码，尽管从语法上看是少了一些重要的字符，例如分号，但的确是有效的C语言代码。写的非常规范，以至于我想弄清楚这些代码是从哪里来的。 使用谷歌一搜，我就找到了它。这段代码实际上是这样的： send[0] = 0x65; send[1] = 1; send[2] = 3; send[3] = 5; send[4] = 7; send[5] = 11; if (rcx_sendrecv(fd, send, 6, recv, 1, 50, RETRIES, use_comp) != 1) { fprintf(stderr, &amp;quot;%s: delete firmware failed\n&amp;quot;, progname); exit(1); } /* Start firmware download */ send[0] = 0x75; send[1] = (start &amp;gt;&amp;gt; 0) &amp;amp; 0xff; send[2] = (start &amp;gt;&amp;gt; 8) &amp;amp; 0xff; send[3] = (cksum &amp;gt;&amp;gt; 0) &amp;amp; 0xff; send[4] = (cksum &amp;gt;&amp;gt; 8) &amp;amp; 0xff; send[5] = 0; if (rcx_sendrecv(fd, send, 6, recv, 2, 50, RETRIES, use_comp) != 2) { fprintf(stderr, &amp;quot;%s: start firmware download failed\n&amp;quot;, progname); exit(1); } /* Transfer data */ addr = 0; index = 1; for (addr = 0, index = 1; addr &amp;lt; len; addr += size, index++) { 上面的这段代码来自一个乐高积木(LEGO，一种可编程的积木游戏)的固件下载程序，由斯坦福大学的Kekoa Proudfoot写于1998年。你可以从这里下载完成的程序</description></item><item><title>易语言程序加密的原则</title><link>https://arae.cc/post/25710.html</link><pubDate>Thu, 14 Jul 2016 10:48:03 +0800</pubDate><guid>https://arae.cc/post/25710.html</guid><description>早先人们的加密方法是通过在软盘上格式化一些非标准磁道，在这些磁道上写入一些数据，如软件的解密密钥等等。这种软盘成为“钥匙盘”。软件运行时用户将软盘插入，软件读取这些磁道中的数据，判断是否合法的“钥匙盘”。 软盘加密还有其它一些技术，如弱位加密等等。 随着近年来软盘的没落，这种方法基本上退出了历史舞台。新的软件加密技术也越来越多了。 加密前要考虑周到且严密 说实话，有很多人在易语言论坛上发贴，说自己用易语言编写的软件有了破J，还非常高兴，有人用才会被破J，但我想，如果是很高兴的这样子，除非你的软件技术含量很低，或你是微软，想被别人破J，您不应该高兴，这有点象别人打了你一耳光，你还很高兴，你的知识产权或著作权已被奸人侵犯了，性质很恶劣，后果很严重。除了拿起法律武器，劳命伤财，还有就是加强加密方式。 如果被制作出注册机，情况是最糟糕的，作者需要全部更换全部用户的注册KEY文件，工作量相当地相当地大。因此一个好的软件保护发布前必须考虑周到，而且是面面俱到，否则出一个新版，发现一个破J，再出一个新版去修正，那样的事情是极其弱智的。 需要加密的内容要制定一个计划 一开始不明白如何加密的易语言用户，一般就找一下论</description></item></channel></rss>