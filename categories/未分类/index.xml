<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>未分类 on ARAE</title><link>https://arae.cc/categories/%E6%9C%AA%E5%88%86%E7%B1%BB.html</link><description>Recent content in 未分类 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 20 Aug 2018 21:38:04 +0800</lastBuildDate><atom:link href="https://arae.cc/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>20180820-文章删除记录</title><link>https://arae.cc/post/25794.html</link><pubDate>Mon, 20 Aug 2018 21:38:04 +0800</pubDate><guid>https://arae.cc/post/25794.html</guid><description>共计110项 已删除文章列表 200行JS代码实现超级简单的区块链 8行代码在Python3中实现多核并行执行 API - SendMessageA简单示例运用 API 拦截窗口关闭&amp;amp;最大化&amp;amp;最小化消息 Crazy Kids Delphi7简单DirectUI界面源码 E language is what？ EDB易数据库查看器 Faded (Conor Maynard Cover) H5 video 视频标签属性详解 HashMap —— 高效随机存取数据结构 ,文本索引必备 Hello Venus - 我是艺术(I&#39;m Ill) hook禁止外部程序创建新窗口[易语言源码] MDI窗口支持库源码，支持静态编译嗷 PHP导出Excel、CSV文件，并解决显示不正常等问题 p站找的几张图 Win10提示威胁服务已经停止,立即重启的解决方法 Windows10关闭80端口占用 [教程]防止模块被反编译的有效方法（吴总提供）： [转]易语言 360免杀方法心得总结 “大牛”不可缺少的三种文献精读思维模式 《ありがとう》中文名《感谢》 【WebKit内核】EasyCKL开源浏览器库 6.1 支持调试运行了 一分钟明白 VS manifest 原理 不懂技术的人不要对懂技术的人说这很容易实现 为什么“程序猿”常有而“程序媛”不常有？ 为什么我们不要 .NET 程序员 为什么程序员都是夜猫子 为什么谷歌要执行严格的代码编写规范 为啥这么多</description></item><item><title>新模板暂时弃坑</title><link>https://arae.cc/post/25787.html</link><pubDate>Sat, 21 Apr 2018 22:51:48 +0800</pubDate><guid>https://arae.cc/post/25787.html</guid><description>布局想的好好的写出来之后就感觉特 别扭，暂时丢这以后再说</description></item><item><title>HEXO.NexT 表情测试 - b1</title><link>https://arae.cc/post/25778.html</link><pubDate>Wed, 07 Mar 2018 18:55:41 +0800</pubDate><guid>https://arae.cc/post/25778.html</guid><description>这破东西之前弄过两三次，每次都比这个好@pp{阴险}，最后忘记啥毛病都删了。。 调用代码大概就是@pp/{滑稽}(就当/不存在)中间那个pp方便以后添加其他表情，虽说有个别地方写死了@pp{你懂的}。。 @pp{滑稽}@pp{滑稽}@pp{滑稽}这个魔性的表情我都眼馋很久了@pp{滑稽}@pp{滑稽}@pp{滑稽} @pp{呵呵}@pp{哈哈}@pp{吐舌}@pp{太开心}@pp{笑眼}@pp{花心}@pp{小乖}@pp{乖}@pp{捂嘴笑}@pp{滑稽}@pp{你懂的}@pp{不高兴}@pp{怒}@pp{汗}@pp{黑线}@pp{泪}@pp{真棒}@pp{喷}@pp{惊哭}@pp{阴险}@pp{鄙视}@pp{酷}@pp{啊}@pp{狂汗}@pp{what}@pp{疑问}@pp{酸爽}@pp{呀咩爹}@pp{委屈}@pp{惊讶}@pp{睡觉}@pp{笑尿}@pp{挖鼻}@pp{吐}@pp{犀利}@pp{小红脸}@pp{懒得理}@pp{勉强}@pp{爱心}@pp{心碎}@pp{玫瑰}@pp{礼物}@pp{彩虹}@pp{太阳}@pp{星星月亮}@pp{钱币}@pp{茶杯}@pp{蛋糕}@pp{大</description></item><item><title>注释用的好，可能会挨打！？</title><link>https://arae.cc/post/25773.html</link><pubDate>Fri, 23 Feb 2018 17:19:04 +0800</pubDate><guid>https://arae.cc/post/25773.html</guid><description>一、概述 这是写在前面的话：在开发中的时候，应该、可能、或许会看到有趣的注释 遇到类似的注释能让开发更加的有乐趣，我提倡程序猿继续传承下去这个美好优良传统 二、正文 比如： /** * 描述：XXXX &amp;lt;br&amp;gt; * 作者： XXXX &amp;lt;br&amp;gt; * E-mail: XXXX &amp;lt;br&amp;gt; * 日期： XXXX 下午XXXX &amp;lt;br&amp;gt; */ public class Points implements Serializable { private static final long serialVersionUID = 1L; /** ************************************************************** * * * .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-. * * | ______ | * * | .-&amp;quot; &amp;quot;-. | * * | / \ | * * | _ | | _ | * * | ( \ |, .-. .-. ,| / ) | * * | &amp;gt; &amp;quot;=._ | )(__/ \__)( | _.=&amp;quot; &amp;lt; | * * | (_/&amp;quot;=._&amp;quot;=._ |/ /\ \| _.=&amp;quot;_.=&amp;quot;\_) | * * | &amp;quot;=._&amp;quot;(_ ^^ _)&amp;quot;_.=&amp;quot; | * * | &amp;quot;=\__|IIIIII|__/=&amp;quot; | * * | _.=&amp;quot;| \IIIIII/ |&amp;quot;=._ | * * | _ _.=&amp;quot;_.=&amp;quot;\ /&amp;quot;=._&amp;quot;=._ _ | * * | ( \_.=&amp;quot;_.=&amp;quot; `--------` &amp;quot;=._&amp;quot;=._/ ) | * * | &amp;gt; _.=&amp;quot; &amp;quot;=._ &amp;lt; | * * | (_/ \_) | * * | | * * &#39;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#39; * * * * LASCIATE OGNI SPERANZA, VOI CH&#39;ENTRATE * ************************************************************** */ /** * 请不要尝试修改属性lng和lat为别的数据类型，相信我，改了之后，你会后悔的。 * 至于原因，创建的时候我应该知道，现在只剩下上帝知道 */ private Integer id; private String markerId; // 标识符 private double lng; private double lat; private String type; private Integer status = 0; // 覆盖物状态：0未添加，1已添加，2已添加并且是已发送的覆盖物 默认值：0 private List&amp;lt;Points&amp;gt; list = new ArrayList&amp;lt;Points&amp;gt;(); ...... 再或者在结尾处加 /* * ┏┓ ┏┓ *┏┛┻━━━┛┻┓ *┃ ┃ *┃ ━ ┃ *┃ ┳┛ ┗┳ ┃ *┃ ┃ *┃ ┻ ┃ *┃ ┃ *┗━┓ ┏━┛ * ┃ ┃神兽保佑 * ┃ ┃代码无BUG！ * ┃ ┗━━━┓ * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ * ┃┫┫ ┃┫┫</description></item><item><title>什么是现代化编程？</title><link>https://arae.cc/post/25759.html</link><pubDate>Tue, 12 Sep 2017 11:53:08 +0800</pubDate><guid>https://arae.cc/post/25759.html</guid><description>在我的青少年时期，我涉猎了编程基础和一些汇编。当我学习了 Turbo Pascal 之后这事更进了一步，它提供了一种最早期的集成开发环境（IDE）。我觉得这下合我心意了。实际上，IDE 是一种让你在一个友好的环境内，方便地编写、编译、调试和运行代码的程序。Turbo Pascal 没有太多的图形界面（它基于文本），但它有菜单和窗口。你可以进入调试模式，跟踪变量的值等等。 然后我转到了 Delphi （一种图形化的 Turbo Pascal），它拥有到今天看来仍然不错的出色 IDE。我用 Visual Basic 设计了一个“会报时的钟”，当时发表在 Bulletin Board Systems（使用 Windows 3.1 的一个系统）。那之后我发现了 Visual Studio。有好几年我的 C++ 编程都是借用的 Visual Studio。以上就是我一直使用的所有 IDE。 早在八十年代初，Smalltalk 就有了著名的强大图形化 IDE（Youtube 视频）。 我认为，使用 IDE 并不代表着“现代化”。现在的 IDE 和过去的 IDE 非常相像。虽然我们编程的内容改变了，但在很多情况下，我们如何编程却没有改变。在我的 Dell 笔记本电脑里装着最新版 Visual Studio。换做 20 年前的我，也能完美地轻松上手它。调试、代码补全、远程代码执行，它和以前很像。事实上，Visual Studio 从未与 Turbo Pascal 相差很大过。而我</description></item><item><title>什么样的编程最难？编程中的快餐式和探路式</title><link>https://arae.cc/post/25758.html</link><pubDate>Sat, 17 Dec 2016 09:49:28 +0800</pubDate><guid>https://arae.cc/post/25758.html</guid><description>说到 技术 这个词，它看起来很深奥其实是你不了解罢了，有些所谓的技术实际上并不一定多么聪明，只不过了解得比你清楚罢了。 什么样的编程最难？ 写你不了解的东西。 举个例子，当你想写个EXE图标相关的程序，你就需要了解PE文件结构，还有EXE图标资源操作相关的现有API和接口。这就是一道门槛，难就难在你要查到相关资料，如果你能直接搜到现成可用的源代码，那是最幸运的。否则在不了解的情况下写，要么写不出来，要么只能用不那么正规的方法去实现，比如直接根据特征码进行操作。 写你不懂的东西。 这条和上面那条差不多，如果你要写的东西需要大量数学，而你数学也没学好，那么自然而然就会成为一道门槛。所以你就需要临时去学下你要用到的数学公式，可是首先你还要知道你需要用到哪些数学公式，所以本质上就等于写你不了解的东西。 写你需求不明确的东西。 你要写的是什么？如果你只能用抽象的概念来回答，那么当你写的时候就会发现，其实你连你的需求是什么都不知道。你要写的东西太复杂了，太万能了，太无限状态机了，没错，有限状态机很好写，可是如果你要写的是无限状态机，那也就是说，你要写的所有状态，你自己都不清楚，那你又要从哪里开始写呢？又要写到哪里是</description></item><item><title>API中数据结构大小计算法</title><link>https://arae.cc/post/25755.html</link><pubDate>Sun, 23 Oct 2016 12:40:20 +0800</pubDate><guid>https://arae.cc/post/25755.html</guid><description>我们在调用系统API函数的时候，经常会碰到一个问题，许多的API第一个参数都是结构尺寸（dwSize） 其他语言里有直接取数据结构尺寸大小的命令，但是易语言中没有，可能很多刚接触的易友当时一定很苦恼这个结构到底多大。 其实要计算结构尺寸很简单，首先了解下易语言中的各种数据类型。 易语言中分基本数据类型，复合数据类型两种。 不过我更喜欢把它分为固定长度类型和可变长度类型。 固定长度类型包括： 字节型，短整数型，整数型，长整数型，小数型，双精度小数型 逻辑型，日期时间型，子程序指针型。 可变长度类型包括： 文本型，字节集型，数组型，支持库自定义数据类型，用户自定义数据类型 固定长度类型就是他在程序中占用的内存字节数是固定的，而可变长度的则不固定，比如文本型，文本增加，内存占用就增加，减少就相应减少等等。而支持库提供的其他数据类型和用户自定义数据类型，也是有可能变大或者变小的，这些不能确定长度的就叫做可变长度类型了。 固定长度类型的可以直接代入计算： 字节型：1 字节 短整数型：2字节 整数型：4字节 长整数型：8字节 小数型：4字节 双精度小数型：8字节 逻辑型：4字节 日期时间型：8字节 子程序指针型：4字节 而对于可变长度的：文</description></item><item><title>身份证号码验证算法</title><link>https://arae.cc/post/25754.html</link><pubDate>Sat, 22 Oct 2016 20:21:07 +0800</pubDate><guid>https://arae.cc/post/25754.html</guid><description>做项目的时候需要对拿到的数据进行“清洗”，比如剔除一些不可能存在的身份证号码。查阅了网上的身份证号码验证算法，自己也总结一下。 (一)18身份证号码的结构 公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。 排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位校验码。 地址码 表示编码对象常住户口所在县(市、旗、区)的行政区域划分代码，按GB/T2260的规定执行。 出生日期码 表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。 顺序码 表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。 校验码计算步骤 (1)十七位数字本体码加权求和公式 S = Sum(Ai * Wi), i = 0, … , 16 ，先对前17位数字的权求和 Ai:表示第i位置上的身份证号码数字值(0~9) Wi:7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 （表示第i位置上的加权因子） (2)计算模 Y = mod(S, 11) (3)根据模，查找得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0 X 9 8 7 6 5 4 3 2 (二)根据17位数字本体码获取最后一位校验码程序实例 public class Id18 { int[] weight={7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2}; /</description></item><item><title>汉语编程能给我们带来什么？</title><link>https://arae.cc/post/25752.html</link><pubDate>Sat, 22 Oct 2016 20:12:07 +0800</pubDate><guid>https://arae.cc/post/25752.html</guid><description>每隔几天，就会有人在网媒上讨论中文编程的问题，甚至有编程的套件发布，每次都会引发一场大讨论。但是在程序员的圈子里，却很少看到有人关注这个话题。 为什么汉语编程这个话题总能引吸一些人的眼球呢？我们就开动脑筋，来想一想汉语编程能带来的好处。 1） 民族荣誉感增强，这种感觉就像是以后我们的子孙再也不用学习英文了，而是英国人，美国人，世界各国人民都挤破脑袋来学习汉语，中华民族可以把学习英语的大 把时间节约下来，去做更有意义的事情。这以后，你去国外旅游，当地人一听说你是中国来的，会说汉语，就好吃好喝好妹子的招待你，只求能和你有一个练习口语 的机会。万一你失业了，实在是找不着工作，你还可以找个地方传授别人通关汉语四六级的秘诀。 等到汉语编程取待英语编程的那一天，咱们一定要让老英老美把咱们中国人吃过的苦头挨个吃一遍。这个看来，上升到民族大义的高度，汉语编程还真值得下功夫。 2）汉语编程能降低中国人学习编程的门槛，中国的软件水平有机会领先世界。 对于第一点，帽子太大，我无法发表观点，大多数打着为国为民旗号的行动最后看来都是扯蛋，为自己才是真的。第二点中提到的降低中国人学习编程的门槛，看来更具现实意义。 但笔者调查发现，</description></item><item><title>为什么“程序猿”常有而“程序媛”不常有？</title><link>https://arae.cc/post/25751.html</link><pubDate>Sat, 22 Oct 2016 20:08:21 +0800</pubDate><guid>https://arae.cc/post/25751.html</guid><description>许多人对计算机科学界极客们有一种普遍的印象。这没什么——但假如这个领域内女生比男生多呢？你一定会想：什么？这一定是疯了！ 喜欢《星际迷航》、不善社交与计算机编程能力的关系，其实值得怀疑。事实上，早期计算机编程工作主要由女性完成，人们认为女性的天赋十分适合这项工作。在 1967 年出版的计算机编程就业指导中，一位作者写道：“编程需要耐心、恒心、关注细节，这些正是女生的特点”。女性为计算机科学的发展做出了重要贡献，“直到 1980 年代，比尔·盖茨、史蒂夫·乔布斯等计算机领域的英雄人物才登场，‘极客’一词开始被用于形容技术型人才。”那么，是什么影响了女性对“计算机科学”的刻板印象呢？ 华盛顿大学心理学家萨普纳·谢里扬（Sapna Cheryan）对“固有印象”是否阻碍女性进入计算机领域十分感兴趣。她和同事调查了本科生对计算机专业的兴趣发现，女生的兴趣普遍较小——考虑到该领域由男性主导，这一结果并不意外。但她们为什么不感兴趣就不太容易解释了：女生觉得“自己与计算机专业学生的典型形象不符”。研究者认为，这或许影响到学生在计算机专业中的归属感。所以说，正因为一些固有印象而“感到”自己不适合学习计算机，女生才对这一专业“不</description></item><item><title>微信小程序服务器端用什么语言开发？</title><link>https://arae.cc/post/25750.html</link><pubDate>Thu, 29 Sep 2016 15:41:49 +0800</pubDate><guid>https://arae.cc/post/25750.html</guid><description>微信小程序服务器端用什么语言开发？ 首先，比如微信二次开发，可以用java或者php 来做服务器端语言来进行二次开发，那小程序呢？文档写着.js负责业务逻辑，难道服务器端就是纯JS实现？ 包括对数据库的操作吗？ 还是也可以用php？ 其实文档中在request里面可以填写自己的网站地址，那么应该就可以从自己的服务器获取到数据，所以后端什么数据语言都可以。 那这样的话是不是跟ajax差不多啊， 后台PHP处理好后反馈给前端数据又怎么返回？ 服务端语言和前端逻辑没啥关系吧，php，python都行。但是最好用 python，快速开发！php 开发后端会遇到很多问题的。 wx.request发起的是https请求。一个微信小程序，同时只能有5个网络请求连接。</description></item><item><title>一门编程语言的诞生总是有理由的</title><link>https://arae.cc/post/25749.html</link><pubDate>Thu, 29 Sep 2016 15:35:39 +0800</pubDate><guid>https://arae.cc/post/25749.html</guid><description>Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many, and how well, languages can be described this way. Algol: Assembly language is too low-level. Pascal: Algol doesn&amp;rsquo;t have enough data types. Modula: Pascal is too wimpy for systems programming. Simula: Algol isn&amp;rsquo;t good enough at simulations. Smalltalk: Not everything in Simula is an object. Fortran: Assembly language is too low-level. Cobol: Fortran is scary. PL/1: Fortran doesn&amp;rsquo;t have enough data types. Ada: Every existing language is missing something. Basic: Fortran is scary. APL: Fortran isn&amp;rsquo;t good enough at manipulating arrays. J: APL requires its own character set. C: Assemby language is too low-level. C++: C is too low-level. Java: C++ is a kludge. And Microsoft is going to crush us. C#: Java is controlled by Sun. Lisp: Turing Machines are an awkward way to describe computation. Scheme: MacLisp is a kludge. T: Scheme has no libraries. Common Lisp: There are too many dialects of Lisp. Dylan: Scheme has no libraries, and Lisp syntax is scary. Perl: Shell scripts/awk/sed are not enough like programming languages. Python: Perl is a kludge. Ruby: Perl is a kludge, and Lisp syntax is scary. Prolog: Programming is not enough like logic. 易语言: 以上所有语言都是英文编程，没有中文编程简单易懂。</description></item><item><title>杀毒软件已经进入空前弱智与混沌状态</title><link>https://arae.cc/post/25748.html</link><pubDate>Thu, 29 Sep 2016 15:31:14 +0800</pubDate><guid>https://arae.cc/post/25748.html</guid><description>杀毒软件和病毒警报系统敏感化 迅雷安全中心是一个非常敏感非常变态的东西，10%的汉化软件将会报告是病毒，50%的带插件安装版本将会报是病毒，70%的超过600m的软件报告是病毒，90%的易语言的作品。这是个垃圾产品，不过也是为了网友好，网友可以选择不下载迅雷安全中心报告有问题的软件，不过将失去一个用好软件的机会，这随便你们，绿盟会注明它提示有病毒的给大家的，只要大家反馈。 卡巴，误报能力相当强，敏感过度了，瑞星也有跟风的嫌疑。 官方软件也报毒 以下是报毒过的官方软件： ppmate，影音风暴（有插件吧），酒精，nero，矮人dos工具箱，深山红叶工具箱，几个qq修改版，比如快乐无极版和狂人版，q宠保姆（由于加了壳） 还有不少写着官方版本也有“毒”，但是网友还是问为什么有毒，有的明明就是官方的下载地址，还破口大骂&amp;hellip;实在无语，比如影音风暴，酒精和nero的官方版，最近骂的不少&amp;hellip;.明明写着官方版，而且连接地址也是官方的，还&amp;hellip;. 防毒软件要求太苛刻 当用一些壳来保护软件的时候，是“毒”； 狐狸少爷的软件都是“毒”； 开端口的软件是“毒”； 监控sniffer类软件都是“毒”</description></item><item><title>升级易语言支持库保证向下兼容性的几点总结</title><link>https://arae.cc/post/25747.html</link><pubDate>Thu, 29 Sep 2016 15:24:11 +0800</pubDate><guid>https://arae.cc/post/25747.html</guid><description>易语言支持库升级之后，要保证向下兼容性，主要是做到以下几点： 一：保证原有的易语言源程序（.e）能正常打开（兼容点1）、正常编译（兼容点2）、编译结果正确（兼容点3）； 二：保证原有的易语言程序（.exe）能正常运行（兼容点4）、运行结果正确（兼容点5）。 这里说的“原有的易语言源程序”和“原有的易语言程序”是指，替换新版支持库文件之前，使用旧版支持库编写的易语言源程序，和使用该源程序编译生成的可执行程序。 本文主要就此问题结合具体情况进行分析和总结。 一，为支持库增加一条命令 新增加的命令，必须放在所有原有命令的后面，否则将违反兼容点2和4，更无法保证兼容点3和5。这是因为，在源程序和EXE中，记录的都是命令的索引，一旦在中间插入一条命令，将导致后面的命令索引全变了，进而导致非常严重的错位问题。只要记住，总是在所有命令的最后添加新的命令，就不会引入兼容性问题。具体到数据类型的成员方法，与上面的分种一致，因为它也是使用支持库中唯一的全局函数表的，但这里引入了一个新的细节，有一个 LIB_DATA_TYPE_INFO.m_pnCmdsIndex 用于指定方法在全局函数表中的命令索引，所以通过它可以调整各成员方法的顺序，这种做法通常不会引入兼容性问题。 二，为命令增加</description></item><item><title>E language is what?</title><link>https://arae.cc/post/25746.html</link><pubDate>Thu, 29 Sep 2016 15:18:04 +0800</pubDate><guid>https://arae.cc/post/25746.html</guid><description>易语言是什么？ 有人说它是一门编程语言，有人说它是一个编译器，有人说它是一个集成开发环境（IDE），有人说它是一款软件开发工具。 说的都对，又都不全对。 其实，易语言就是这样一个综合体：它既是一门编程语言，又是一个编译器，又是一个集成开发环境（IDE），又是一款软件开发工具。准确地说，易语言是一个自成体系的软件开发平台。虽然易语言目前还不足以与强大的 Java、.NET 平台相抗衡，但它的的确确是一个“麻雀虽小、五脏俱全”的、自成体系的软件开发平台。</description></item><item><title>EIDEA介绍</title><link>https://arae.cc/post/25745.html</link><pubDate>Wed, 14 Sep 2016 11:14:28 +0800</pubDate><guid>https://arae.cc/post/25745.html</guid><description>支持库命令查找 支持直接搜索所有已加载的支持库命令 找到后自动定位 自动引用模块 双击快速引用常用模块 自动加载模块 可以添加你想自动加载的模块到自动加载分类上，当易语言启动时，就自动加载到易语言里。(目前只支持双击易语言主程序新建空程序时才能自动加载) 自定义添加分类功能，程序初始化时自动为你添加了“常用模块”分类 可以添加你经常使用的模块，方便随时加载到易语言，而不用到时找，浪费不必要的时间。 常用便签 看其名知其意，可添加你常用工具软件、易源码、目录。 支持无限分类。 自动备份 可自定义设置多长时间自动备份1次源码。 可指定自动备份的目录路径。 可设置备份时的文件名格式，最大备份的数量。 触发备份：源码的源文件有变动。（自动备份的原理，每次达到指定时间触发备份时，会先去读取你已保存源码的MD5，和最后一次备份的源码MD5进行对比是否一致，如果不一致则备份） 为什么没开了自动备份，但是不起效？ 原因：源码未自动保存。 解决办法，可以开启自动保存功能，或者手动Ctrl+S进行保存，只有源码的源文件变了，才会触发备份。 自动保存 可自定义设置多长时间自动保存一次源码，防止源码因停电或其它原因丢失，造成不可挽回的结果。 模块查看器</description></item><item><title>为啥这么多人喜欢用性感头像</title><link>https://arae.cc/post/25743.html</link><pubDate>Fri, 09 Sep 2016 13:40:29 +0800</pubDate><guid>https://arae.cc/post/25743.html</guid><description>●用没太刻意选择过的生活照作头像。 这类人对自己的接纳度比较高，对外貌也比较有自信，不一定长得好看，但是能接纳自己的本来面目。内心没藏太多秘密，也没做过什么见不得人的事儿，在网络世界和现实世界中差别不大。 ●用端端正正的证件照作头像。 为人中规中矩，不敢越雷池一步，其实内心很压抑。 ●用自己PS过的照片、艺术照、文艺范儿照、装可爱照作头像。 往往有较强的自我中心倾向，就是有点自恋啦！其实自恋的外表透露出自卑的内心，不太能接受真实的自己。 ●用又远又小的人像作头像图片。 注重隐私，害羞保守，防卫心较强，不易接近陌生人，基本上不太可能与人自来熟。 ●用部分脸的超级特写作头像。 自我感很强。其实很想被人认出来，在用伪艺术的形式来遮掩内心的真正渴望。 ●用童年照片作头像。 总觉得过去的事物比现在美好，容易伤感，不易改变。巨蟹座偏多。 ●用家人的照片作头像。 自我感很薄弱，有很强的依赖性，缺乏安全感，内心深处不愿长大，渴求庇护。 ●用男女朋友的照片作头像。 正陷在甜蜜而昏头昏脑的热恋中，爱得不能自拔，爱到失去自我。 ●用儿女照片作头像。 如果用小Baby的照片，大多是初为人母，难掩内心的幸福与喜悦。如果孩子都七八岁以上了，还把孩</description></item><item><title>我是如何走上编程的不归路的</title><link>https://arae.cc/post/25741.html</link><pubDate>Thu, 08 Sep 2016 15:17:28 +0800</pubDate><guid>https://arae.cc/post/25741.html</guid><description>正规读书十二载，在此之前从没接触过易语言，编程。至于是怎么走上编程这条路，并为之所倾心的，且听我细细道来。 那年，正是炫舞飞起的年代，各个网吧都是在玩炫舞、cf，你没个账号都不好意思和人家打招呼。那天，某场炫舞PK中，对手一直是perfect。噢，简直谢特啊！不敢相信！然后观战的围观群众就炸开锅了，他开G开G。当时也是太傻太年轻啊，啥也没争取，默认他赢了。比赛完后在心里默念，G是啥？开个G就这么牛了？ 百度之后，对开挂这类东西有了初步了解。想着，要是我自己也做一个，哈哈，他们就要称我为大神了。 说干就干，打开电脑就开始搜关键词：入门编程。结果哔了狗，广告占多数。 而且让人眼花缭乱，C++,PHP,JAVA，PCL等等。最主要的是，所有语言都是这么夸自己的：我是最好的入门教材！我是最好的语言！画外音：咱还能要点脸不？重点是英语水平不过关，我也看不懂啊。现在回想起来，英语水平并不是很关键的问题，多看看也就懂了。 又搜，这次在关键词中加入了中文二字，中文编程入门，搜出来易语言。我到现在都还记忆很深刻的记得当时搜出来的标题：易语言中文编程，从入门到精通。 回想起当时，为何选择的是易语言呢，原因有三。一，我</description></item><item><title>EIDE助手-更新日志</title><link>https://arae.cc/post/25763.html</link><pubDate>Fri, 29 Jul 2016 23:08:33 +0800</pubDate><guid>https://arae.cc/post/25763.html</guid><description>3.0 [未发布] 点击转到3x页面 上次修改时间：2018-7-27 00:30:37 2.9 调整 &amp;lsquo;状态夹-&amp;gt;Tools&amp;rsquo; 界面样式 增加 &amp;lsquo;状态夹-&amp;gt;Tools&amp;rsquo; 前景色设置项 修复 &amp;lsquo;状态夹-&amp;gt;Tools&amp;rsquo; 点击后无法跳出循环体 优化多进程通讯消息分发机制 优化SET.EXE设置程序，增加&amp;rsquo;关于&amp;rsquo;页面 修复 &amp;lsquo;智能编译&amp;rsquo; 一处逻辑错误导致无法编译/多次编译问题 修复 &amp;lsquo;F1键展开当前命令参数表&amp;rsquo; 部分情况下失效 SET.EXE设置程序，增加&amp;rsquo;删除无效配置文件&amp;rsquo;，位于 支持库设置-&amp;gt;危险区 工具箱 -&amp;gt; 屏幕取色，增加单击视图区恢复调色板功能 修复 &amp;lsquo;优化配色方案&amp;rsquo; 修改配色失败 修复 &amp;lsquo;模块管理&amp;rsquo; 在特定布局下无法获取句柄 修复 &amp;lsquo;屏蔽修复优化-&amp;gt;自动切换工作夹&amp;rsquo; 失焦BUG 发布时间：2018-7-28 2.8 重写工具箱 -&amp;gt; POST测试 优化工具箱 -&amp;gt; 编码转换 修复模块管理 在特殊情况下出现错位问题 优化工具箱 -&amp;gt; NASM 配色方案</description></item><item><title>时差因素！中国地区Win10免费升级于7月30日17:59截止</title><link>https://arae.cc/post/25739.html</link><pubDate>Fri, 29 Jul 2016 11:48:42 +0800</pubDate><guid>https://arae.cc/post/25739.html</guid><description>Win10免费升级服务将于美国当地时间7月29号截止，由于时差关系导致不同地区的截止时间不同。在中国地区，Win10免费升级服务将于7月30日17:59分截止，伦敦地区的截止时间则于明日上午的10:59分截止。 7月29日消息，微软Windows10操作系统免费升级大限为7月29日，该日期之后再想升级Win10要花费888元（Win10家庭版中国区零售价格）购买正版系统。时差关系，中国地区的免费升级将在7月30日17:59正式结束（本周六），还有30多个小时的升级时间，请抓紧最后机会！ 在其他国家和地区的朋友们，根据时差不同，具体时间也会不同。 在这最后的30多个小时里面，没有升级的用户还会选择升级吗？当看到往后要花费888元来购买正版系统，估计很多用户都会去尝试升级，毕竟谁也不想和钱过不去。</description></item><item><title>程序猿专用代码注释:佛祖保佑，永无BUG</title><link>https://arae.cc/post/25736.html</link><pubDate>Wed, 20 Jul 2016 02:17:56 +0800</pubDate><guid>https://arae.cc/post/25736.html</guid><description>逛论坛发现这个,实在是高上大啊 // _ooOoo_ // o8888888o // 88&amp;quot; . &amp;quot;88 // (| -_- |) // O\ = /O // ____/`---&#39;\____ // . &#39; \\| |// `. // / \\||| : |||// \ // / _||||| -:- |||||- \ // | | \\\ - /// | | // | \_| &#39;&#39;\---/&#39;&#39; | | // \ .-\__ `-` ___/-. / // ___`. .&#39; /--.--\ `. . __ // .&amp;quot;&amp;quot; &#39;&amp;lt; `.___\_&amp;lt;|&amp;gt;_/___.&#39; &amp;gt;&#39;&amp;quot;&amp;quot;. // | | : `- \`.;`\ _ /`;.`/ - ` : | | // \ \ `-. \_ __\ /__ _/ .-` / / // ======`-.____`-.___\_____/___.-`____.-&#39;====== // `=---=&#39; // // ............................................. // 佛祖保佑 永无BUG // 佛曰: // 写字楼里写字间，写字间里程序员； // 程序人员写程序，又拿程序换酒钱。 // 酒醒只在网上坐，酒醉还来网下眠； // 酒醉酒醒日复日，网上网下年复年。 // 但愿老死电脑间，不愿鞠躬老板前； // 奔驰宝马贵者趣，公交自行程序员。 // 别人笑我忒疯癫，我笑自己命太贱； // 不见满街漂亮妹，哪个归得程序员？</description></item><item><title>微软修复已存在19年的漏洞</title><link>https://arae.cc/post/25735.html</link><pubDate>Fri, 15 Jul 2016 14:30:31 +0800</pubDate><guid>https://arae.cc/post/25735.html</guid><description>微软发布补丁包修补漏洞，而据研究人员指出，微软修补的一个漏洞（BUG），在Windows95时代就已经存在，这个漏洞在黑市上价值几十万美元。 微软当然不会公开所修补的漏洞从何时存在于系统。 据美国华盛顿邮报网站报道，IBM公司X-Force部门的研究人员弗雷曼（RobertFreeman）进行了爆料。据称，微软本周二修补的一个漏洞中，包括一个存在了至少19年的漏洞，可以让黑客远程操控电脑，十分危险。 据称，这一漏洞在Windows95的第一版中就已存在，不过目前还没有证据证明黑客曾经利用过这个漏洞。 众所周知，有关攻击程序、软件漏洞等存在一个巨大的网络黑市，不良之徒和黑客组织相互交易。弗雷曼透露，这个存在了19年的漏洞，在黑市上价值六位数（几十万美元）。 华盛顿邮报指出，这一案例，也证明修补软件漏洞是一个极富挑战性的工作，即使是微软这样的公司，在严格审查之下，仍然会让漏洞漏网。 实际上，长寿的软件“BUG”不算新鲜事。 2010年，谷歌(微博)的一位工程师发现了一个“17岁”的Windows系统漏洞，存在于32位版系统中，可被黑客用来劫持电脑控制权。 今年九月份，在一个免费的工具软件中，研究人员发现了</description></item><item><title>和程序员打交道的十大禁忌</title><link>https://arae.cc/post/25734.html</link><pubDate>Fri, 15 Jul 2016 14:08:33 +0800</pubDate><guid>https://arae.cc/post/25734.html</guid><description>如果你正在读这篇文章，那么非常有可能是有人发给你了这条链接。这个人可能是你的朋友，同事，亲戚，父母，儿子，兄弟，表亲，姑嫂，外甥，或者恰巧帮你解决了电脑问题的一个人。他通常是程序员，系统管理员，或者 “擅长电脑”名声在外的某个人。 这篇文章的初衷是想要澄清跟程序员打交道的错误方式和禁忌。 不要“一遇到问题就去找程序员” 通常，技术问题通过阅读使用说明就可以解决。比如你刚买了一个新的播放器，想要把它连接到你的电视，你只需要找到使用手册里关于如何连接接口的那一页即可。 错误信息通常会被很清晰地列出来。通过仔细阅读并加以思考这个信息传达了什么来解决这个问题是非常有可能的。例如，如果你看到一条信息“你的硬盘已经快满了”，通常这就意味着你的硬盘要满了。为了安抚你的电脑，你需要删除一些你不再需要的文件（或者将它们转移到外部的移动硬盘中）。 不要认为“程序员对电脑无所不知” 朋友或某个亲戚可能很擅长电脑，但他们并非无所不知。一般他们也完全不知道怎么使用你电脑中出问题的程序，仅仅是使用一些简单的逻辑判断或google搜索来帮你找到解决方案。 实际上，用谷歌搜索已经足够了，因为它会引导你找到相关的论坛或者博客，早在你遇</description></item><item><title>为什么程序员都是夜猫子</title><link>https://arae.cc/post/25732.html</link><pubDate>Fri, 15 Jul 2016 14:02:18 +0800</pubDate><guid>https://arae.cc/post/25732.html</guid><description>一种很流行的说法是，程序员是把咖啡因转化成程序代码的机器。 说的是实情，随便问一个程序员，问他什么时候工作最有状态，估计他很有可能说是深夜。有人稍微早一点，有人更晚。有一种流行的趋势是凌晨4点起床，在破晓之前这段时间里做一些事情。而另一些人喜欢凌晨4点才睡觉。 所有这些的主要目的是躲避打搅。但是你把自己反锁在屋里不就行了？为什么对夜晚情有独钟？ 我想，这事归纳下来有3点：工人的时间表，疲倦的大脑和明亮的电脑屏幕。 工人的时间表 Paul Graham 在2009年写了一篇关于 工人的时间表的文章——主要是说这个世界(主要)存在两种时间表。传统的管理者的时间表——一天的时间别分成了很多小时，一次十分钟的分心至多会浪费你1个小时的时间。 而另一种情况是程序员们所说的工人的时间表——生产东西的人的时间表。研究一个大型的抽象的系统，需要把整件事情装进大脑——这样的一些人类似于用珍贵的水晶玻璃搭建一间房子，一旦有人打搅你，整个结构都会滑落，摔成无数的碎片。 这就是为什么被打扰的程序员会如此的生气。 因为这是一种巨大的精力上的投资，在没有几个小时不被打搅的环境中的酝酿，你不可能开始工作。如果你好不容易在大脑中构建了整个要思考的事情的模</description></item><item><title>鲜为人知的编程真相</title><link>https://arae.cc/post/25731.html</link><pubDate>Fri, 15 Jul 2016 13:53:06 +0800</pubDate><guid>https://arae.cc/post/25731.html</guid><description>当程序员的经历让我知道了一些关于软件编程的事情。下面的这些事情可能会让朋友们对软件开发感到惊讶： 一个程序员用在写程序上的时间大概占他的工作时间的10-20%，大部分的程序员每天大约能写出10-12行的能进入最终的产品的代码 — —不管他的技术水平有多高。 好的程序员花去90%的时间在思考、研究和实验，来找出最优方案。差的程序员花去90%的时间在调试问题程序、盲目的修改程序，期望某种写法能可行。 ”一个卓越的车床工可以要求比一个一般的车床工多拿数倍高的工资，但一个卓越的软件写手的价值会10000倍于一个普通的写手。“ — — 比尔 盖茨 一个好的程序员的效率会是一个普通的程序员的十倍之上。一个伟大的程序员的效率会是一个普通程序员的20-100倍。这不是夸张 — — 1960年以来的无数研究都一致的证明了这一点。一个差的程序员不仅仅是没效率 — — 他不仅不能完成任务，写出的大量代码也让别人头痛的没法维护。 伟大的程序员只花很少的时间去写代码 — — 至少指那些最终形成产品的代码。那些要花掉大量时间写代码的程序员都是太懒惰，太自大，太傲慢，不屑用现有的方案去解决老问题。伟大的程序员的精明之处在于懂得欣赏和重复利用通用模式。好的</description></item><item><title>10个最“优秀”的代码注释</title><link>https://arae.cc/post/25729.html</link><pubDate>Fri, 15 Jul 2016 13:48:46 +0800</pubDate><guid>https://arae.cc/post/25729.html</guid><description>下面是stackoverflow网站上网友针对你看到过的最好的代码注释是什么样的？这个问题给出的回答的前10条： // 亲爱的维护者： // 如果你尝试了对这段程序进行‘优化’， // 并认识到这种企图是大错特错，请增加 // 下面这个计数器的个数，用来对后来人进行警告： // 浪费在这里的总时间 = 39h /** * 致终于来到这里的勇敢的人： 你是被上帝选中的人，英勇的、不辞劳苦的、不眠不修的来修改 我们这最棘手的代码的编程骑士。你，我们的救世主，人中之龙， 我要对你说：永远不要放弃，永远不要对自己失望，永远不要逃走，辜负了自己。 永远不要哭啼，永远不要说再见。永远不要说谎来伤害自己。 */ Exception up = new Exception(&amp;quot;Something is really wrong.&amp;quot;); throw up; // 一些修改1 - 2002/6/7 增加临时的跟踪登录界面 // 一些修改2 - 2007/5/22 我临时的犯傻 #define TRUE FALSE //逗一逗调试程序的傻瓜们 if (/*you*/ $_GET[&#39;action&#39;]) { //celebrate(恭喜) // 如果这段代码好用，那它是Paul DiLascia写的。 //如果不好用，我不知道是谁写的。 //写这段代码的时候，只有上帝和我知道它是干嘛的 //现在，只有上帝知道 // 晕了，以后再修改 // 神奇。勿动。 你有没有更绝的？</description></item><item><title>程序员的样子</title><link>https://arae.cc/post/25728.html</link><pubDate>Fri, 15 Jul 2016 13:39:24 +0800</pubDate><guid>https://arae.cc/post/25728.html</guid><description>往运行服务器上直接上传文件时程序员的样子 当凌晨3点还在修改bug时程序员的样子 当发现没有按CTRL-S就关闭了文件时程序员的样子 当使用正则表达式返回了想要的结果时程序员的样子 第一次使用CSS美化页面时的效果 当所有人都在办公室挥汗如雨的加班而你却能安然的回家度周末时的样子 当老板想找一个人来修改这个严重bug时程序员的样子 当经过了数小时的努力后第一次运行开发出的脚本时程序员的样子</description></item><item><title>坐得越久 死得越快</title><link>https://arae.cc/post/25726.html</link><pubDate>Fri, 15 Jul 2016 13:26:20 +0800</pubDate><guid>https://arae.cc/post/25726.html</guid><description>又一项研究显示，久坐对你的健康是真的、真的、真的非常有害。请买一个可站着工作的桌子吧！ 一项对超过20万个澳大利亚人的研究结果给这样一个事实又增加了一份活体证明：坐得越久的人死得越快。研究同时还发现，锻炼不能改变这种趋势——尽管它能有效降低这种风险。 研究结果清晰的告诉我们这样一个简单的信息：多站立、少坐着，这样能延长你的寿命。 尽管那些每周锻炼超过5个小时的人的死亡风险会大大降低，但当他们坐的过久时，这种风险仍然会升高。 目前，“久坐对身体有害”已经被广泛的认可。最近几年的研究表明，在电脑屏幕前、电视前做得太久，或仅是闲坐太久，都会增加你死亡的风险。 这次的调查采取了一种更直接的方式，观察人们每日坐着的时间总和和他们在之后三年内死亡率之间的关系，希望能给久坐的危害程度标个数字。 结果让人震惊，每天坐着超过11小时的人在未来三年的死亡风险要比每天坐着少于4小时的人的死亡风险高出40%。这是经过了对年龄、体重、物理锻炼、健康水平等所有会影响到死亡风险的因素进行校正后得到的结果。同时得到的一个正比数据是：坐得越久，死亡风险越高。 这个研究是萨克斯研究所（Sax Institute）的45 and Up研究项目的组</description></item><item><title>为什么谷歌要执行严格的代码编写规范</title><link>https://arae.cc/post/25725.html</link><pubDate>Fri, 15 Jul 2016 13:23:10 +0800</pubDate><guid>https://arae.cc/post/25725.html</guid><description>我们在谷歌所做事情中另外一个让我感到异常有效、有用的制度是严格的编码规范。 在到Google工作之前，我一直认为编码规范没有什么用处。我坚信这些规范都是官僚制度下产生的浪费大家的编程时间、影响人们开发效率的东西。 我是大错特错了。 在谷歌，我可以查看任何的代码，进入所有谷歌的代码库，我有权查看它们。事实上，这种权限是很少人能拥有的。但是，让我感到惊讶的却是，如此多的编码规范—缩进，命名，文件结构，注释风格—这一切让我出乎意料的轻松的阅读任意一段代码，并轻易的看懂它们。这让我震惊—因为我以为这些规范是微不足道的东西。它们不可能有这么大的作用—但它们却起到了这么大的作用。当你发现只通过看程序的基本语法结构就能读懂一段代码，这种时间上的节省不能不让人震撼！ 反对编码规范的人很多，下面是一些常见的理由，对于这些理由，我以前是深信不疑。 这是浪费时间！ 我是一个优秀的程序员，我不愿意浪费时间干这些愚蠢的事。我的技术很好，我可以写出清晰的、易于理解的代码。为什么我要浪费时间遵守这些愚蠢的规范？答案是：统一是有价值的。就像我前面说的—你看到的任何的一行代码—不论是由你写的，还是由你身边的同事，还是由一个跟你相差</description></item><item><title>不懂技术的人不要对懂技术的人说这很容易实现</title><link>https://arae.cc/post/25724.html</link><pubDate>Fri, 15 Jul 2016 13:22:40 +0800</pubDate><guid>https://arae.cc/post/25724.html</guid><description>“这个网站相当简单，所有你需要做的就是完成X，Y，Z。你看起来应该是技术很好，所以，我相信，你不需要花费太多时间就能把它搭建起来。” 我时不时的就会收到这样的Email。写这些邮件的人几乎都是跟技术不沾边的人，或正在研究他们的第一个产品。起初，当听到人们这样的话，我总是十分的恼怒。他们在跟谁辩论软件开发所需要的时间？但后来我意识到，即使我自己对自己的项目预测要花去多少开发时间,我也是一筹莫展。如果连我自己都做不好，我何必对那些人恼怒呢？ 真正让我郁闷的不是他们预估的错误。问题在于他们竟然认为自己可以做出正确的估计。作为开发人员，我们经常会发现，在软件开发的问题上，一个外行人会很自然的把复杂的事情估计的很简单。 这并不是为我们的愤怒找借口。但这引起了另外一个有趣的问题：为什么我们天生的预测复杂性的能力在遇到编程问题时会失灵？ 为了回答这个问题，让我们来认识一下我们的大脑如何估计事情的。有些事情对于一些没有经验的人也很容易预估正确，但有些事情则不然。 我们来想想观看一个人弹吉他。即使你从来没有弹过吉他，在观看了一场弹奏《玛丽有只小羊羔(Mary had a Little Lamb)》的吉他表演后，你也能大概推测出这很简单</description></item><item><title>那些出现在电影中的程序代码</title><link>https://arae.cc/post/25722.html</link><pubDate>Fri, 15 Jul 2016 13:09:06 +0800</pubDate><guid>https://arae.cc/post/25722.html</guid><description>高科技无关的电影也偶尔会出现一些跟计算机相关的镜头。文本搜罗的是在各种电影中出现过的代码，它们有的是黑客脚本，有的是绝密文件，有的就是为了摆酷，文中对这些代码都有截屏，你是否能看出它们是什么语言？ 《钢铁侠》，c语言 最近我重新看了一遍《钢铁侠》，发现了一些有趣的事情。在钢铁侠的人工心脏第一次“初始化启动”期间，在那个“恐怖分子”的洞穴里，一些长长短短的C语言代码出现在那个伪造的笔记本电脑屏幕上。 屏幕上的这些代码，尽管从语法上看是少了一些重要的字符，例如分号，但的确是有效的C语言代码。写的非常规范，以至于我想弄清楚这些代码是从哪里来的。 使用谷歌一搜，我就找到了它。这段代码实际上是这样的： send[0] = 0x65; send[1] = 1; send[2] = 3; send[3] = 5; send[4] = 7; send[5] = 11; if (rcx_sendrecv(fd, send, 6, recv, 1, 50, RETRIES, use_comp) != 1) { fprintf(stderr, &amp;quot;%s: delete firmware failed\n&amp;quot;, progname); exit(1); } /* Start firmware download */ send[0] = 0x75; send[1] = (start &amp;gt;&amp;gt; 0) &amp;amp; 0xff; send[2] = (start &amp;gt;&amp;gt; 8) &amp;amp; 0xff; send[3] = (cksum &amp;gt;&amp;gt; 0) &amp;amp; 0xff; send[4] = (cksum &amp;gt;&amp;gt; 8) &amp;amp; 0xff; send[5] = 0; if (rcx_sendrecv(fd, send, 6, recv, 2, 50, RETRIES, use_comp) != 2) { fprintf(stderr, &amp;quot;%s: start firmware download failed\n&amp;quot;, progname); exit(1); } /* Transfer data */ addr = 0; index = 1; for (addr = 0, index = 1; addr &amp;lt; len; addr += size, index++) { 上面的这段代码来自一个乐高积木(LEGO，一种可编程的积木游戏)的固件下载程序，由斯坦福大学的Kekoa Proudfoot写于1998年。你可以从这里下载完成的程序</description></item><item><title>浅谈程序员创业</title><link>https://arae.cc/post/25720.html</link><pubDate>Fri, 15 Jul 2016 13:00:54 +0800</pubDate><guid>https://arae.cc/post/25720.html</guid><description>什么是创业？ 关于“创业”二字有必要重新学习一下，找了两个相对权威定义： 创业就是创业者对自己拥有的资源或通过努力能够拥有的资源进行优化整合，从而创造出更大经济或社会价值的过程。——百度百科 创业是一种思考、推理和行为方式，它为机会所驱动，需要在方法上全盘考虑并拥有和谐的领导能力。创业必须要贡献出时间、付出努力，承担相应的财务的、精神的和社会的风险，并获得金钱的回报、个人的满足和独立自主。——互动百科 两者都给出了明确的创业定义，这里想着重想强调一下创业的目的：物质目的和精神目的，现代社会唯金主义人群不乏少数，提到创业自然而然想到“赚钱”，其实创业的目的不仅是“收入大于成本”，还有精神丰收。按照百度+互动百科的说法，最终极的创业应该是个人物质精神、社会物质精神四丰收。 当然，不是人人创业都追求“四丰收”，完全可以只追求个人金钱丰收，或是追求其中的任何一项或几项，但要注意——千万不要损害未选的，比如为个人赚钱损害社会或他人利益。 怎么才算创业成功？ 创业的成功（这里定义为达到创业初级制定目标）一定是依赖于合理的目标＋个人的努力＋合适的方法＋良好的运气＋主动把握机遇，各个条件没有顺序也没有主次，但这五点</description></item><item><title>所谓的牛逼，都是用苦逼换来的</title><link>https://arae.cc/post/25713.html</link><pubDate>Thu, 14 Jul 2016 11:49:39 +0800</pubDate><guid>https://arae.cc/post/25713.html</guid><description>那个未来的牛逼之人，他开始变得隐忍，开始接受做一些苦逼的事。 [ 1 ] Amy在演讲台上分享她个人的创业经历，主要讲的是她如何从一名普通的广告从业人员，到现在成为活动策划公司的CEO。公司目前在上海很火，承办各大活动，市里的高层领导也曾去参观过。因为公司办得出色，Amy还上过新闻联播。 演讲快结束时，我听到旁边一对男女在议论，男的小声说：“这种公司很好办的，要搞活动就是雇几个人，搭几张桌子的事儿。在风口上，猪都能飞起来。” 听到这话，我心里真觉得堵了块石头，因为简单粗暴的评论能把人的努力在瞬间贬得一文不值。作为Amy的前同事，我知道她几乎是耗尽了心血才让公司走到这种地步。 公司初期的业务，是从举办小型线下活动开始的。读书会、社交舞会、瑜伽课、花艺、茶道&amp;hellip; &amp;hellip;各种各样的活动都接。Amy从那时开始便样样事情自己上，合作商都靠自己拉。前期、中期、后期，每一个环节都要把关，每一个细节都要做好。 有一次我凌晨回公司，发现Amy还在改策划案，边上是一袋袋速溶咖啡。更夸张的是，她喝咖啡连冲泡的时间都没，直接干吃速溶咖啡。再后来，直接从网上买了个睡袋，天天睡公司。 活动中的饮品都要向供应商一</description></item><item><title>一分钟明白 VS manifest 原理</title><link>https://arae.cc/post/25704.html</link><pubDate>Tue, 12 Jul 2016 13:58:11 +0800</pubDate><guid>https://arae.cc/post/25704.html</guid><description>什么是vs 程序的manifest文件 manifest 是VS程序用来标明所依赖的side-by-side组建,如ATL, CRT等的清单。 为什么要有manifest文件 一台pc上，用一组建往往会有不止一个版本（c:/windows/winsxs或系统目录下），程序在加载的时候，不知加载哪个，于是manifest文件来指明。 manifest在哪儿，如何创建。 如果用VS开发，可以Set通过porperty-&amp;gt;configuration properties-&amp;gt;linker-&amp;gt;manifest file-&amp;gt;Generate manifest To Yes来自动创建manifest来指定系统的和CRT的assembly版本。 除了这样产生外部的manifest file，还有embedded manifest信息可以被写到所生成的二进制文件内 Set porperty-&amp;gt;configuration properties-&amp;gt;manifest tool-&amp;gt;embed manifest To Yes 对于xp及早前的windows版本，external manifest会比embed manifest有更高的优先级，但对于windows server及后的版本，相反。 为什么我的manifest明明指明 name=&amp;ldquo;Microsoft.VC80.DebugCRT&amp;rdquo; version=&amp;ldquo;8.0.50608.0&amp;rdquo;， 但是用depends.exe工具却发现引用的是8.00.50727.42呢？ 因为在C:/WINDO</description></item><item><title>程序员接私活的玄机</title><link>https://arae.cc/post/25683.html</link><pubDate>Sat, 25 Jun 2016 17:30:50 +0800</pubDate><guid>https://arae.cc/post/25683.html</guid><description>没错，就是私活，你干过吧，哈，或者，你现在正想靠它赚点零花？别急，这次我们就来聊聊程序员怎样对待私活这个话题，接还是不接，怎么接，看完自有分晓。 很久以前，我曾经接过几次私活（在“千奇百怪的程序员”一文中我列出了全局变量控的一段代码，就是我帮别人干活时碰到的代码），现在不断有人想让我帮他们干点儿私活，但我都拒绝了。 为什么我曾经接私活现在又坚决不沾呢？ 为什么接私活 有人可能说：还不是为了钱嘛！对，钱，钱，钱，这是很多程序员接私活时的主要考虑。但也不全是哦，还有相当一部分人愿意接私活是出于其他原因。 先说说我的三次私活吧。 我曾经教过一个人学习 Qt ，在线的，一对一辅导，帮他熟悉 Qt ，协助他完成一个测试工具的开发。他人在美国，先通过西联汇款给我打了一百多美元，然后我们就开始了……后来呢，因为我总是想按我的方式教他，而他老嫌我让他自己先学习这个学习那个，闹崩了…… 这次经历对我是一次尝试，我当时其实是想了解一对一的在线辅导是否可行，事实证明这里面可能存在很多坑，一是沟通问题，二是教学适配问题，一不注意就会不欢而散。所以，现在这种事情我也不尝试了。我刚在订阅号“程序视界”后台拒绝了一个类似的请求，见下图： 我的</description></item><item><title>如何编写高质量的易语言代码？</title><link>https://arae.cc/post/25654.html</link><pubDate>Sat, 25 Jun 2016 14:37:51 +0800</pubDate><guid>https://arae.cc/post/25654.html</guid><description>什么是一个高效的软件？一个高效的软件不仅应该比实现同样功能的软件运行得更快，还应该消耗更少的系统资源。程序的时间效率是指运行速度，空间效率是指程序占用内存或者外存的状况。另外程序的效率我们也可以分为全局效率和局部效率。全局效率是指站在整个系统的角度上考虑的效率，局部效率是指站在模块或函数角度上考虑的效率。 使用整数和长整数 提高代码运行速度最简单的方法莫过于使用正确的数据类型了。也许你不相信，但是 正确地选择数据类型可以大幅度提升代码的性能。在大多数情况下，程序员可以将短整数型、小数型和双精度小数型的变量替换为整数（Integer）或长整数（Long）类型的变量，因为易语言处理整数和长整数的能力远远高于处理其它几种数据类型。 在大多数情况下，程序员选择使用小数型或双精度小数型的原因是因为它们能够保存小数。但是小数也可以保存在整数类型的变量中。例如程序中约定有三位小数，那么只需要将保存在整数型变量中的数值除以1000就可以得到结果。根据我的经验，使用整数和长整数替代短整数型、小数型和双精度小数型后，代码的运行速度可以提高将近10倍。 但是我们也不要老是强调使用使用整数和长整数，因为在程序中数据类型</description></item><item><title>软件开发人员的作战手册 - 让程序员活的久一点</title><link>https://arae.cc/post/25686.html</link><pubDate>Sat, 25 Jun 2016 14:36:50 +0800</pubDate><guid>https://arae.cc/post/25686.html</guid><description>1、 程序员的职业准则是：诚实（如实的报告你的状态，风险和出现的问题），守信（承诺完成的任务就要按时完成），尊重（尊重给你的代码提建议的同事，对事不对人）。 2、 写有BUG 的代码和写没有 BUG 的代码花费的时间是一样的。 3、 BUG是会成长的，存活时间越长生命力越顽强。 4、 如果一个笨方法可以解决问题，那它就不是笨方法。 5、 把你的工作分割成小时级的目标任务，你会发现你的工作会轻松很多。 6、 把你要做的工作一条一条的列在纸上，做完一个就打一个勾，你会喜欢打勾的感觉。 7、 不要问客户怎么做，问客户这么做行不行。 8、 让客户给各个功能按优先级排序，也许客户会问“反正所有功能都要完成，为什么还要优先级？”，回答：“如果一个功能做不完要杀头，另一个功能做不完要砍掉胳膊，我还是愿意先做杀头的那个”。 9、 试着跟客户交朋友。 10、 可做可不做的东西都不要做。 11、 业绩考评不一定跟加班时间成正比。 12、 不要提交没有编译过的代码。 13、 不要提交没有测试过的代码。 14、 不要提交没有被REVIEW 的代码。 15、 不要告诉测试人员怎么测试。</description></item><item><title>Zend Studio 13.0(PHP集成开发环境)</title><link>https://arae.cc/post/25647.html</link><pubDate>Sat, 25 Jun 2016 14:34:51 +0800</pubDate><guid>https://arae.cc/post/25647.html</guid><description>特点 1.快速代码开发与配置本地和远程调试器； 2.数据库连通性 &amp;amp; SQL工具 团队合作环境； 3.完全 PHP 4/PHP 5 切换 PHPDocs/PHP文档处理程序支持SFTP, FTP以至SSH的安全连接 100个以上代码摘录； 4.50个以上样品数据库应用程序 与Zend Platform组合。[1] Zend Studio是当今最伟大的PHP集成开发环境 Zend Studio包括了PHP开发所有必须的部件，通过一整套编辑、调试、分析、优化和数据库工具，使用Zend Studio 缩短了开发周期，并简化了复杂的应用方案，毋庸置疑，其已经是当今世上最强大的PHP集成开发环境。 Zend Studio的强大之处，除了一般编辑器所具有的代码高亮，语法自动缩进，书签功能外，它内置的调试器更是无可挑剔，支持本地和远程（debug server）两种调试模式，支持诸如跟踪变量、单步运行、断点、堆栈信息、函数调用、查看实时输出等多种高级调试功能。另外，最新版（Zend Studio 10.01）对中文的支持也是非常稳定的。 主要组件 专业的集成开发环境内置编辑器, 调试器, 以及帮助文档 Windows, Linux, Mac 等多个操作系统版本 多语言支持 专业的编辑器 关键字、语法加亮显示 (PHP, HTML, XHTML, and Javascript) XML&amp;amp; CSS的关键字、语法加亮显示 代码</description></item></channel></rss>