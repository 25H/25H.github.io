<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>易语言 on ARAE</title><link>https://blog.arae.cc/tags/%E6%98%93%E8%AF%AD%E8%A8%80.html</link><description>Recent content in 易语言 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 23 Feb 2021 14:01:38 +0800</lastBuildDate><atom:link href="https://blog.arae.cc/tags/%E6%98%93%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>易语言输出增强 AMZ-Plugin</title><link>https://blog.arae.cc/post/25837.html</link><pubDate>Tue, 23 Feb 2021 14:01:38 +0800</pubDate><guid>https://blog.arae.cc/post/25837.html</guid><description>balabalabal&amp;hellip;. 易语言AMZ专用输出增强插件。 截图 下载 &amp;nbsp;下载：蓝奏云 / 密码:123</description></item><item><title>AMZ 扩展插件管理平台</title><link>https://blog.arae.cc/post/25800.html</link><pubDate>Tue, 01 Jan 2019 12:00:00 +0800</pubDate><guid>https://blog.arae.cc/post/25800.html</guid><description>支持库介绍 一个基于 易语言 深度定制开发的扩展插件管理平台 相关截图 最新版本界面可能与截图有出入。 Win10显示效果更佳 更新说明 [点击进入查看](/post/25763.html) -- 安装/使用 将“AMZ”、“lib”两个目录复制到易语言根目录下 打开易语言 菜单-&amp;gt;工具-&amp;gt;支持库配置 选择“. AMZ ”支持库 打开易语言 菜单-&amp;gt;工具-&amp;gt;AMZ Settings 勾选将使用的插件 重启易语言 更新方法 到官方Q群文件内下载最新版本助手安装/更新包 删除更新包 AMZ\Config.ini 文件， 如修改过&amp;rsquo;自定义命令名&amp;rsquo;插件配置文件，删除更新包 \AMZ\plugin\mz.r1.cc\Config.ini 文件 将 AMZ、lib目录覆盖到易语言根目录即可， 插件使用方法 打开易语言 菜单-&amp;gt;工具-&amp;gt;AMZ Settings 勾选要使用的插件后重启易语言 插件设置根据设置页面提示是否要重启易语言 注：AMZ(包括内置插件)基于官方原版开发，第三方修改版可能无法正常运行。 插件开发 点击进入查看 插件冲突说明 有的易友加载[AMZ]后，发现易语言关闭不了、关闭会崩溃、或其它的一些问题，这些可能是跟其它的支持库起冲突了，目前发现跟有[ET]支持库有冲突。 确定是否是支持库冲突造成的流程：按住Shift键，然后双</description></item><item><title>易语言-&gt;编程基础知识-&gt;数据类型</title><link>https://blog.arae.cc/post/25761.html</link><pubDate>Wed, 20 Sep 2017 18:59:29 +0800</pubDate><guid>https://blog.arae.cc/post/25761.html</guid><description>数据类型： 各种数值的数据都在内存中占用一定的存储空间。字节（byte) 是系统中最基本存储单位。数据类型所占字节数越多，所能够容纳数值的范围就越大。 数据类型的概念： 数据：是指能够输入到计算机中，并能够被计算机识别和加工处理的符号的集合，是程序处理的最小对象。例如：数值、字符、图形、图像和声音等都是数据。数据在程序中以常量或变量的方式被引用，不同的数据特点有不同的存储要求和处理算法。 上小学时，我们学过自然数，小数，分数等，其中，1,2,3这样的数叫自然数；-2，-1，0，1，2等的数叫整数；1.1，1.3，1.4，1.66这样的数叫小数。把数据进行这样的区分，在电脑语言里被称做数据类型。 易语言的数据类型从数据结构来区分，可分为基本数据类型、特殊数据类型。 基本数据类型有6种，包括数值型、逻辑型、日期时间型、文本型、字节集型、子程序指针型。 数值型数据又包括了字节型、短整数型、整数型、长整数型、小数型、双精度小数型。数值型数据都是由0-9数字，小数点组成的一个数值。 常用数据类型： 数据类型名称 占用字节 取值范围 字节型 1 0 ～ 255 短整数型 2 -32,768 ～ 32,767 整数型 4 -2,147,483,648 ～ 2,147,483,647 长整数型 8 -9,223,372,036,854,775,808 ～ 9,223,372,036,854,775,807 小数型 4 -3.4E38 ～ 3.4E38 (7位小数) 双精</description></item><item><title>易语言自定义命令（自定义核心支持库命令名）</title><link>https://blog.arae.cc/post/25757.html</link><pubDate>Sun, 13 Nov 2016 19:26:58 +0800</pubDate><guid>https://blog.arae.cc/post/25757.html</guid><description>此插件为Eapp平台专用插件，平台下载地址：572521856 (QQ群文件)</description></item><item><title>执行命令行说明</title><link>https://blog.arae.cc/post/25756.html</link><pubDate>Tue, 08 Nov 2016 08:35:02 +0800</pubDate><guid>https://blog.arae.cc/post/25756.html</guid><description>{p} = 相对于易语言根目录\AM\Cmd\，注意：后面带有 {f} = 当前编译出去的程序文件全路径 {hide} = 隐藏执行命令行执行的窗口，此标记必须放到第一行。 // = 屏蔽当前行的命令行，屏蔽后将不再执行此命令行。 命令例子： {hide} {p}upx.exe -1 {f} 命令例子说明： 1.隐藏执行窗口 2.执行upx压缩；-1为upx命令；{f}为编译文件路径。</description></item><item><title>API中数据结构大小计算法</title><link>https://blog.arae.cc/post/25755.html</link><pubDate>Sun, 23 Oct 2016 12:40:20 +0800</pubDate><guid>https://blog.arae.cc/post/25755.html</guid><description>我们在调用系统API函数的时候，经常会碰到一个问题，许多的API第一个参数都是结构尺寸（dwSize） 其他语言里有直接取数据结构尺寸大小的命令，但是易语言中没有，可能很多刚接触的易友当时一定很苦恼这个结构到底多大。 其实要计算结构尺寸很简单，首先了解下易语言中的各种数据类型。 易语言中分基本数据类型，复合数据类型两种。 不过我更喜欢把它分为固定长度类型和可变长度类型。 固定长度类型包括： 字节型，短整数型，整数型，长整数型，小数型，双精度小数型 逻辑型，日期时间型，子程序指针型。 可变长度类型包括： 文本型，字节集型，数组型，支持库自定义数据类型，用户自定义数据类型 固定长度类型就是他在程序中占用的内存字节数是固定的，而可变长度的则不固定，比如文本型，文本增加，内存占用就增加，减少就相应减少等等。而支持库提供的其他数据类型和用户自定义数据类型，也是有可能变大或者变小的，这些不能确定长度的就叫做可变长度类型了。 固定长度类型的可以直接代入计算： 字节型：1 字节 短整数型：2字节 整数型：4字节 长整数型：8字节 小数型：4字节 双精度小数型：8字节 逻辑型：4字节 日期时间型：8字节 子程序指针型：4字节 而对于可变长度的：文</description></item><item><title>升级易语言支持库保证向下兼容性的几点总结</title><link>https://blog.arae.cc/post/25747.html</link><pubDate>Thu, 29 Sep 2016 15:24:11 +0800</pubDate><guid>https://blog.arae.cc/post/25747.html</guid><description>易语言支持库升级之后，要保证向下兼容性，主要是做到以下几点： 一：保证原有的易语言源程序（.e）能正常打开（兼容点1）、正常编译（兼容点2）、编译结果正确（兼容点3）； 二：保证原有的易语言程序（.exe）能正常运行（兼容点4）、运行结果正确（兼容点5）。 这里说的“原有的易语言源程序”和“原有的易语言程序”是指，替换新版支持库文件之前，使用旧版支持库编写的易语言源程序，和使用该源程序编译生成的可执行程序。 本文主要就此问题结合具体情况进行分析和总结。 一，为支持库增加一条命令 新增加的命令，必须放在所有原有命令的后面，否则将违反兼容点2和4，更无法保证兼容点3和5。这是因为，在源程序和EXE中，记录的都是命令的索引，一旦在中间插入一条命令，将导致后面的命令索引全变了，进而导致非常严重的错位问题。只要记住，总是在所有命令的最后添加新的命令，就不会引入兼容性问题。具体到数据类型的成员方法，与上面的分种一致，因为它也是使用支持库中唯一的全局函数表的，但这里引入了一个新的细节，有一个 LIB_DATA_TYPE_INFO.m_pnCmdsIndex 用于指定方法在全局函数表中的命令索引，所以通过它可以调整各成员方法的顺序，这种做法通常不会引入兼容性问题。 二，为命令增加</description></item><item><title>E language is what?</title><link>https://blog.arae.cc/post/25746.html</link><pubDate>Thu, 29 Sep 2016 15:18:04 +0800</pubDate><guid>https://blog.arae.cc/post/25746.html</guid><description>易语言是什么？ 有人说它是一门编程语言，有人说它是一个编译器，有人说它是一个集成开发环境（IDE），有人说它是一款软件开发工具。 说的都对，又都不全对。 其实，易语言就是这样一个综合体：它既是一门编程语言，又是一个编译器，又是一个集成开发环境（IDE），又是一款软件开发工具。准确地说，易语言是一个自成体系的软件开发平台。虽然易语言目前还不足以与强大的 Java、.NET 平台相抗衡，但它的的确确是一个“麻雀虽小、五脏俱全”的、自成体系的软件开发平台。</description></item><item><title>易语言 取自定义数据类型的大小</title><link>https://blog.arae.cc/post/25744.html</link><pubDate>Sat, 10 Sep 2016 01:37:11 +0800</pubDate><guid>https://blog.arae.cc/post/25744.html</guid><description>先说一下易语言的变量储存机制 易语言有基本数据类型和复合数据类型两种 基本数据类型包括：1. 各种整数 2.各种浮点 3. 逻辑值 他们都是储存在栈上的 大小都是固定的 用不着取 复合类型一般储存在堆上 然后在栈上储存堆上数据的引用 其中有几种比较特殊：字符串 字节集 数组 这两种类型的大小虽然储存在堆上的某个地方 但都有专门的取大小函数 直接调用即可 剩下就是自定义数据类型 比如类或者结构 特别是类 类的数据成员都是私有的 假如你想知道别人写的一个模块里一个类的大小 不可能通过数数据成员的方法得到 那如何取到呢？有人可能提出用“取变量地址”这个函数 可惜的是 “取变量地址”取到的永远是栈上的地址 根据上面所说 栈上地址的内容就是堆上地址 但是易语言没有一个用指针取整数的函数 这就需要用一个系统api：RtlMoveMemory 这个函数跟c语言memcpy的功能一样 但是有了他问题就变得容易的多 声明一个整形变量a q是一个自定义的类或者结构 RtlMoveMemory (取变量地址 (a), 取变量地址 (q), 4) 这样a储存的就是ls在堆区的地址 之后用到一个api：LocalSize 我们都知道堆区内存分配必然用到LocalAlloc/GlobalAlloc 那么也能通过LocalSize取到大小 调</description></item><item><title>EIDE助手（易语言支持库）</title><link>https://blog.arae.cc/post/25762.html</link><pubDate>Fri, 29 Jul 2016 11:56:20 +0800</pubDate><guid>https://blog.arae.cc/post/25762.html</guid><description>支持库介绍 EIDE支持库是一款基于易语言IDE开发的编程工具，提供了很多易语言便携功能。新版本EIDE插件支持库更名为APP助手。自带多种插件，如编程工具，快速引用模块，屏蔽相关信息，智能编译，智能语法等等。 独创插件加载继续，10+插件完美秒开 注：EIDE助手只是辅助支持库，不会增加任何代码编译到你的程序里面 相关截图 最新版本界面可能与截图有出入。 Win10显示效果更佳 更新说明 点击进入查看 安装/使用 将“AM”、“lib”两个目录复制到易语言根目录下 打开易语言 菜单-&amp;gt;工具-&amp;gt;支持库配置 选择“. APP ”支持库 打开易语言 菜单-&amp;gt;工具-&amp;gt;APP管理 勾选将使用的插件 重启易语言 助手更新方法 到官方Q群文件内下载最新版本助手安装/更新包 删除更新包 AM\AppConfig.ini 文件， 如修改过&amp;rsquo;自定义命令名&amp;rsquo;插件配置文件，删除更新包 AM\APP\CC_idy\Config.ini 文件 将 AM、lib目录覆盖到易语言根目录即可， 助手插件使用方法 打开易语言 菜单-&amp;gt;工具-&amp;gt;APP管理 勾选要使用的插件后重启易语言 插件设置根据设置页面提示是否要重启易语言 注：APP平台(包括内置插件)基于官方原版开发，第三方修改版可能无法正常运行。 助手插</description></item><item><title>易语言特征码定位工具源码</title><link>https://blog.arae.cc/post/25738.html</link><pubDate>Fri, 22 Jul 2016 09:28:51 +0800</pubDate><guid>https://blog.arae.cc/post/25738.html</guid><description>调用API函数实现文件的特征码定位。 链接: http://pan.baidu.com/s/1kU5mE4B 密码: mwdx</description></item><item><title>时钟事件执行时间超出时钟周期问题解释</title><link>https://blog.arae.cc/post/25737.html</link><pubDate>Thu, 21 Jul 2016 14:13:58 +0800</pubDate><guid>https://blog.arae.cc/post/25737.html</guid><description>时钟组件 作为定时器 系统会在设定时间发送 WM_TIMER 消息给消息队列，因为事件处理函数和窗口回调函数都是同线程， 在一个消息未处理完返回之前是不能处理其他事件消息的，也就是一个时钟事件函数未执行完返回之前，系统是不会发送下一个 WM_TIMER 消息到消息队列中的，所以第二个WM_TIMER消息也就是会被忽略掉。 将时钟周期设置为500 1.下面这个例子你会发现 a 和b是同步的数值是相等的就是这个道理 .局部变量 a, 整数型, 静态 .局部变量 b, 整数型, 静态 a ＝ a ＋ 1 调试输出 (“a”, a) 延时 (1000) b ＝ b ＋ 1 调试输出 (“b”, b) 2.第二个例子很有意思，你会发现程序一直在输出a ，而没有输出b，呵呵，你来猜猜是什么原因？ .局部变量 a, 整数型, 静态 .局部变量 b, 整数型, 静态 a ＝ a ＋ 1 调试输出 (“a”, a) 延迟 (1000) b ＝ b ＋ 1 调试输出 (“b”, b) 第二个例子 和第一个例子的区别是把延时（）换成了延迟（），想来看看这两个命令的作用和区别，他们的区别一个是相当于暂停当前线程向下执行，等待设定长时间后在向下执行，但并不处理事件消息； 另一个是在等待中并且处理事件消息。那么为什么会出现这样的结果呢，首先来看一下延迟（）命令 他是在等待中处理消息队列中未决的消息，那么WM_T</description></item><item><title>禁止WebBrowser网页跳转时发出的声音</title><link>https://blog.arae.cc/post/25721.html</link><pubDate>Fri, 15 Jul 2016 13:04:52 +0800</pubDate><guid>https://blog.arae.cc/post/25721.html</guid><description>默认情况下，IE内核的网页浏览框(WebBrowser、CHtmlView、CHtmlDialog等控件)在跳转网页、点击按钮时会发出声音，用CoInternetSetFeatureEnabled这个API可以禁止掉。 易语言代码： .版本 2 .子程序 禁止网页跳转声音 CoInternetSetFeatureEnabled (#FEATURE_DISABLE_NAVIGATION_SOUNDS, #SET_FEATURE_ON_PROCESS, 1) .DLL命令 CoInternetSetFeatureEnabled, 整数型, &amp;quot;urlmon&amp;quot;, &amp;quot;CoInternetSetFeatureEnabled&amp;quot; .参数 FeatureEntry, 整数型, , INTERNETFEATURELIST .参数 dwFlags, 整数型, , DWORD .参数 fEnable, 整数型, , BOOL .常量 FEATURE_DISABLE_NAVIGATION_SOUNDS, &amp;quot;21&amp;quot;, , 禁止跳转声音 .常量 SET_FEATURE_ON_PROCESS, &amp;quot;2&amp;quot;, , 仅对当前进程有效 VC/C++代码： #include &amp;lt;urlmon.h&amp;gt; #ifndef FEATURE_DISABLE_NAVIGATION_SOUNDS #define FEATURE_DISABLE_NAVIGATION_SOUNDS 21 #endif #ifndef SET_FEATURE_ON_PROCESS #define SET_FEATURE_ON_PROCESS 0x00000002 #endif void DisableClickSounds() { CoInternetSetFeatureEnabled((INTERNETFEATURELIST)FEATURE_DISABLE_NAVIGATION_SOUNDS,SET_FEATURE_ON_PROCESS,true); } C#代码： const int FEATURE_DISABLE_NAVIGATION_SOUNDS = 21; const int SET_FEATURE_ON_PROCESS = 0x00000002; [DllImport(&amp;quot;urlmon.dll&amp;quot;)] [PreserveSig] [return: MarshalAs(UnmanagedType.Error)] static extern int CoInternetSetFeatureEnabled( int FeatureEntry, [MarshalAs(UnmanagedType.U4)] int dwFlags, bool fEnable); static void DisableClickSounds() { CoInternetSetFeatureEnabled( FEATURE_DISABLE_NAVIGATION_SOUNDS, SET_FEATURE_ON_PROCESS, true); }</description></item><item><title>易语言程序加密的原则</title><link>https://blog.arae.cc/post/25710.html</link><pubDate>Thu, 14 Jul 2016 10:48:03 +0800</pubDate><guid>https://blog.arae.cc/post/25710.html</guid><description>早先人们的加密方法是通过在软盘上格式化一些非标准磁道，在这些磁道上写入一些数据，如软件的解密密钥等等。这种软盘成为“钥匙盘”。软件运行时用户将软盘插入，软件读取这些磁道中的数据，判断是否合法的“钥匙盘”。 软盘加密还有其它一些技术，如弱位加密等等。 随着近年来软盘的没落，这种方法基本上退出了历史舞台。新的软件加密技术也越来越多了。 加密前要考虑周到且严密 说实话，有很多人在易语言论坛上发贴，说自己用易语言编写的软件有了破J，还非常高兴，有人用才会被破J，但我想，如果是很高兴的这样子，除非你的软件技术含量很低，或你是微软，想被别人破J，您不应该高兴，这有点象别人打了你一耳光，你还很高兴，你的知识产权或著作权已被奸人侵犯了，性质很恶劣，后果很严重。除了拿起法律武器，劳命伤财，还有就是加强加密方式。 如果被制作出注册机，情况是最糟糕的，作者需要全部更换全部用户的注册KEY文件，工作量相当地相当地大。因此一个好的软件保护发布前必须考虑周到，而且是面面俱到，否则出一个新版，发现一个破J，再出一个新版去修正，那样的事情是极其弱智的。 需要加密的内容要制定一个计划 一开始不明白如何加密的易语言用户，一般就找一下论</description></item><item><title>易语言软件反调试大法——六种反调试方法，总有一种适合“它”！</title><link>https://blog.arae.cc/post/25709.html</link><pubDate>Thu, 14 Jul 2016 10:43:20 +0800</pubDate><guid>https://blog.arae.cc/post/25709.html</guid><description>备注：写成子程序是为了方便在应用时插到代码段中，真正使用时请务必插入（最好分段插入）到程序代码中，否则几乎形同虚设。 .版本 2 .子程序 第一法_内存分配反调试, 逻辑型 .参数 最小值, 整数型 .参数 最大值, 整数型 .局部变量 min, 整数型 .局部变量 max, 整数型 GetProcessWorkingSetSize (GetCurrentProcess (), min, max) &#39; 输出调试文本 (min, max) 返回 (min ≠ 最小值 或 max ≠ 最大值) .子程序 第二法_子窗口反调试 EnumChildWindows (GetDesktopWindow (), 到整数 (&amp;amp;子窗口监控子程序), 0) .子程序 第三法_时间差反调试, 逻辑型 .局部变量 ctt, FILETIME .局部变量 ett, FILETIME .局部变量 ktt, FILETIME .局部变量 utt, FILETIME .局部变量 stt, SystemTime .局部变量 ntt, SystemTime .局部变量 qtt, 双精度小数型 GetLocalTime (ntt) GetProcessTimes (GetCurrentProcess (), ctt, ett, ktt, utt) FileTimeToSystemTime (ctt, stt) qtt ＝ 到数值 (ntt.wSecond) × 1000 ＋ ntt.wMilliseconds － 到数值 (stt.wSecond) × 1000 － stt.wMilliseconds 返回 (qtt ＞ 300 或 qtt ＜ 0) .子程序 第四法_启动信息反调试, 逻辑型 .局部变量 启动信息, STARTUPINFO GetStartupInfo (启动信息) 返回 (启动信息.dwX ≠ 0 或 启动信息.dwY ≠ 0 或 启动信息.dwXCountChars ≠ 0 或 启动信息.dwYCountChars ≠ 0 或 启动信息.dwFillAttribute ≠ 0 或 启动信息.dwXSize ≠ 0 或 启动信息.dwYSize ≠ 0) .子程序 第五法_时间间隔反调试, 逻辑型 返回 (GetTickCount () － GetTickCount () ≠ 0) .子程序 第六法_检测调试器反调试, 逻辑型</description></item><item><title>易语言取外网ip的两种方法</title><link>https://blog.arae.cc/post/25708.html</link><pubDate>Thu, 14 Jul 2016 10:41:05 +0800</pubDate><guid>https://blog.arae.cc/post/25708.html</guid><description>易语言取外网ip的两种方法 方法一： .版本 2 .支持库 internet .子程序 取外网ip_文本操作, 文本型 .局部变量 内容, 文本型 .局部变量 开始位置, 整数型 .局部变量 长度, 整数型 .局部变量 网址, 文本型 .局部变量 开始标识符, 文本型 .局部变量 结束标识符, 文本型 网址 ＝ “http://www.net.cn/static/customercare/yourIP.asp” 开始标识符 ＝ “&amp;lt;h2&amp;gt;” 结束标识符 ＝ “&amp;lt;/h2&amp;gt;” 内容 ＝ 到文本 (HTTP读文件 (网址)) 开始位置 ＝ 寻找文本 (内容, 开始标识符, , 假) ＋ 取文本长度 (开始标识符) 长度 ＝ 取文本长度 (内容) － 取文本长度 (开始标识符) － 寻找文本 (内容, 开始标识符, , 假) － (取文本长度 (内容) － 寻找文本 (内容, 结束标识符, , 假)) 返回 (取文本中间 (内容, 开始位置, 长度)) 方法二： .版本 2 .支持库 RegEx .支持库 internet .子程序 取外网ip_正则操作, 文本型 .局部变量 开始标识符, 文本型 .局部变量 结束标识符, 文本型 .局部变量 正则, 正则表达式 .局部变量 结果, 搜索结果 .局部变量 内容, 文本型 .局部变量 网址, 文本型 开始标识符 ＝ “&amp;lt;h2&amp;gt;” 结束标识符 ＝ “&amp;lt;/h2&amp;</description></item><item><title>[教程]防止模块被反编译的有效方法（吴总提供）：</title><link>https://blog.arae.cc/post/25703.html</link><pubDate>Tue, 12 Jul 2016 13:50:53 +0800</pubDate><guid>https://blog.arae.cc/post/25703.html</guid><description>防止模块被反编译的有效方法: 请在模块中建立一个或多个窗口,将其&amp;rdquo;可视&amp;rdquo;属性设置为假,窗口上放一些随机类型的组件(尽量不要用常用组件),重要数据分散放在这些组件的属性里面,模块中的代码动态载入这些窗口,从这些组件属性中读入相关数据使用. 原理: 由于易语言有相当多类型的组件,而每个组件的属性数据保存格式都不一样,模块反编译想把每种组件中的属性数据反编译出来具有相当的难度,所以数据放在组件属性里面是安全的.</description></item><item><title>易语言5.5以后可以直接用的Manifest</title><link>https://blog.arae.cc/post/25702.html</link><pubDate>Tue, 12 Jul 2016 13:42:32 +0800</pubDate><guid>https://blog.arae.cc/post/25702.html</guid><description>易语言5.5以后可以直接用的Manifest &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt; &amp;lt;assembly xmlns=&amp;quot;urn:schemas-microsoft-com:asm.v1&amp;quot; manifestVersion=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;assemblyIdentity type=&amp;quot;win32&amp;quot; name=&amp;quot;xxx&amp;quot; version=&amp;quot;1.0.0.0&amp;quot; /&amp;gt; &amp;lt;!-- Windows XP style common controls --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity type=&amp;quot;win32&amp;quot; name=&amp;quot;Microsoft.Windows.Common-Controls&amp;quot; version=&amp;quot;6.0.0.0&amp;quot; processorArchitecture=&amp;quot;*&amp;quot; publicKeyToken=&amp;quot;6595b64144ccf1df&amp;quot; language=&amp;quot;*&amp;quot; /&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- UAC settings --&amp;gt; &amp;lt;trustInfo xmlns=&amp;quot;urn:schemas-microsoft-com:asm.v2&amp;quot;&amp;gt; &amp;lt;security&amp;gt; &amp;lt;requestedPrivileges&amp;gt; &amp;lt;requestedExecutionLevel level=&amp;quot;asInvoker&amp;quot; uiAccess=&amp;quot;false&amp;quot; /&amp;gt; &amp;lt;/requestedPrivileges&amp;gt; &amp;lt;/security&amp;gt; &amp;lt;/trustInfo&amp;gt; &amp;lt;!-- Windows feature settings --&amp;gt; &amp;lt;application xmlns=&amp;quot;urn:schemas-microsoft-com:asm.v3&amp;quot;&amp;gt; &amp;lt;windowsSettings xmlns:ws=&amp;quot;http://schemas.microsoft.com/SMI/2005/WindowsSettings&amp;quot;&amp;gt; &amp;lt;ws:dpiAware&amp;gt;true&amp;lt;/ws:dpiAware&amp;gt; &amp;lt;/windowsSettings&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;!-- Supported OS versions --&amp;gt; &amp;lt;compatibility xmlns=&amp;quot;urn:schemas-microsoft-com:compatibility.v1&amp;quot;&amp;gt; &amp;lt;application&amp;gt; &amp;lt;!-- Windows 10 --&amp;gt; &amp;lt;supportedOS Id=&amp;quot;{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}&amp;quot; /&amp;gt; &amp;lt;!-- Windows 8.1 --&amp;gt; &amp;lt;supportedOS Id=&amp;quot;{1f676c76-80e1-4239-95bb-83d0f6d0da78}&amp;quot; /&amp;gt; &amp;lt;!-- Windows 8 --&amp;gt; &amp;lt;supportedOS Id=&amp;quot;{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}&amp;quot; /&amp;gt; &amp;lt;!-- Windows 7 --&amp;gt; &amp;lt;supportedOS Id=&amp;quot;{35138b9a-5d96-4fbd-8e2d-a2440225f93a}&amp;quot; /&amp;gt; &amp;lt;!-- Windows Vista --&amp;gt; &amp;lt;supportedOS Id=&amp;quot;{e2011457-1546-43c5-a5fe-008deee3d3f0}&amp;quot; /&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/compatibility&amp;gt; &amp;lt;/assembly&amp;gt;</description></item><item><title>易语言 修改IE协议头模拟手机浏览网页</title><link>https://blog.arae.cc/post/25700.html</link><pubDate>Mon, 11 Jul 2016 16:19:49 +0800</pubDate><guid>https://blog.arae.cc/post/25700.html</guid><description>通过修改注册表，达到修改IE协议头的目的 注册路径 ＝ “SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\User Agent\Post Platform\” 两个文本变量装协议头 windows ＝ “Mozilla/4.0?(compatible;?MSIE?6.1;?Windows?XP)” android ＝ “Mozilla/5.0 (Linux; U; Android 2.2) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1” 写手机协议注册表 写注册项 (#本地机器, 注册路径 ＋ android, android) 还原电脑协议注册表 写注册项 (#本地机器, 注册路径 ＋ windows, windows) 判断本地注册情况为何协议头 .如果 (注册项是否存在 (#本地机器, 注册路径 ＋ windows)) 删除注册项 (#本地机器, 注册路径 ＋ windows) .否则 .如果结束 .如果 (注册项是否存在 (#本地机器, 注册路径 ＋ android)) 删除注册项 (#本地机器, 注册路径 ＋ android) .否则</description></item><item><title>易语言 特征码的8种修改方法</title><link>https://blog.arae.cc/post/25699.html</link><pubDate>Mon, 11 Jul 2016 16:18:05 +0800</pubDate><guid>https://blog.arae.cc/post/25699.html</guid><description>1.NOP法 （常常检测自己是否定位正确） 2.加1法 （很牛B，很简单，但是不一定实用于每个特征码） 3.大小写替换（很好，很强大，修改后100%可以用！ 注意：PE头 函数 不能修改） 4.add ecx,2 可以改为 sub ecx,-2 (加ecx内存器＋2 减ecx内存器-2 - -2得＝2) （特征码：0046B897） 0046B897: 83C4 F0 ADD ESP,-10 sub ESP,10 5.push 变 pop (特征码：0046B96D) PUSH EBP—POP EBP PUSH EDX—POP EDX POP EDX—PUSH EDX 6.je 变 jnz (特征码：004230F6) LOOPD SHORT *.*—JNZ SHORT * 意思： JE——若ZF=1，则跳转 JMP——无条件跳转 JNZ——若ZF=0，则跳转搜索 PUSH——压栈 7.add 变 sub 8.call跳转 call A （原地址） 修改 call B (0区域) B的位置写 call A (原地址) 00423210: E8 3B1DFFFF CALL 00414F50 （原地址） 0049575C: 0000 ADD [EAX],AL (0区域) add=adc sbb=sub jmp=call jp=je</description></item><item><title>易语言ascii（ASCII）转码</title><link>https://blog.arae.cc/post/25697.html</link><pubDate>Mon, 11 Jul 2016 16:16:06 +0800</pubDate><guid>https://blog.arae.cc/post/25697.html</guid><description>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数来表示所有的大写和小写字母，数字0 到9、标点符号， 以及在美式英语中使用的特殊控制字符。 ASCII是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。 ASCII转码就是将类似编码“60,115,99,114,105,112,116,32,116,121,112,101,61,39,116,101,120,116” 变成字节集然后转化成文本​ 首先，分本分割，然后将每一数组转化成“字节” 然后，创建相同数量的0字节的字节集，用到的命令 取空白字节集 (取数组成员数 (数组)) 最后，将用计次循环，将字节逐个装入字节集中 将字节集到文本即可完成转换​ 到文本 (字节集)</description></item><item><title>易语言字节集动态加密</title><link>https://blog.arae.cc/post/25696.html</link><pubDate>Mon, 11 Jul 2016 16:14:49 +0800</pubDate><guid>https://blog.arae.cc/post/25696.html</guid><description>原理很简单： 字节集1（n位随机字节集） 字节集2（m位随机字节集） 被加密字节集=字节集1+被加密字节集+字节集2 被加密字后的字节集=加密（被加密字节集，密码） 解密后的字节集=解密（被解密字节集，密码） 解密后的字节集=字节集1+被加密字节集+字节集2 解密后的字节集=取字节集中间（解密后的字节集，n+1，取字节集长度 (解密后的字节集) -m-n） .版本 2 .支持库 dp1 .子程序 加密_加密or解密, 字节集 .参数 字节集数据, 字节集 .参数 加密or解密, 整数型, , 1加密,2解密 .局部变量 密码文本, 文本型 .局部变量 加密算法, 整数型 .局部变量 word, 文本型 .局部变量 mima1, 文本型 .局部变量 mima2, 文本型 .局部变量 字节集数据中间, 字节集 .如果真 (加密or解密 ≠ 1 或 加密or解密 ≠ 2) 返回 (字节集数据) .如果真结束 word ＝ “0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz!#$%&#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\]^_`{|}~&amp;amp;” .计次循环首 (5, ) mima1 ＝ mima1 ＋ 取文本中间 (word, 取随机数 (1, 93), 1) mima2 ＝ mima2 ＋ 取文本中间 (word, 取随机数 (1, 93), 1) .计次循环尾 () 密码文本 ＝ “ww</description></item><item><title>易语言 利用QQ感知登录提取QQ号码</title><link>https://blog.arae.cc/post/25694.html</link><pubDate>Mon, 11 Jul 2016 16:10:12 +0800</pubDate><guid>https://blog.arae.cc/post/25694.html</guid><description>http://openapi.qzone.qq.com/oauth/show?which=ConfirmPage&amp;amp;display=pc&amp;amp;client_id=******* 这里用dz论坛的链接作为例子。识别主要还是后面的ID，其实都无所谓。 无论是读cook还是源码应该都可以读出QQ号的。具体可以做什么，大家自有发挥，不要做坏事哦~ 建议还是用在营销和广告发布上比较好</description></item><item><title>易语言 客户组件post发送数据带所有信息</title><link>https://blog.arae.cc/post/25693.html</link><pubDate>Mon, 11 Jul 2016 16:09:11 +0800</pubDate><guid>https://blog.arae.cc/post/25693.html</guid><description>这样发送可以模拟不同版本的浏览器，红色参数。 最后的两个换行符不要忘记 提交数据 ＝ “content=12345&amp;amp;uin=867400&amp;amp;replycampus=0&amp;amp;property=GoRE” 提交数据长度 ＝ 到文本 (取文本长度 (提交数据)) 内容 ＝ “POST /cgi-bin/new/msgb_addanswer.cgi HTTP/1.1” ＋ #换行符 内容 ＝ 内容 ＋ “Accept: */*” ＋ 内容 ＝ 内容 ＋ “Referer: http://m.qzone.qq.com/” ＋ 内容 ＝ 内容 ＋ “Accept-Language: zh-cn” ＋ 内容 ＝ 内容 ＋ “Content-Type: application/x-www-form-urlencoded” ＋ 内容 ＝ 内容 ＋ “Accept-Encoding: gzip, deflate” ＋ 内容 ＝ 内容 ＋ “User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; 20080914)” ＋ 内容 ＝ 内容 ＋ “Host: m.qzone.qq.com” ＋ 内容 ＝ 内容 ＋ “Content-Length: ” ＋ 提交数据长度 ＋ 内容 ＝ 内容 ＋ “Cache-Control: no-cache” ＋ 内容 ＝ 内容 ＋ “Connection: Keep-Alive” ＋ 内容 ＝ 内容 ＋ “Cookie: pt2gguin=o0000867400; ptcz=3e2483bfdb847715055cad88514a64bfc366de723f25d8d852e0b2611bb934de; pvid=4385960000; uin=o0000867400; skey=@FHM0ith66; r</description></item><item><title>易语言 写注册项恶搞到你重装系统</title><link>https://blog.arae.cc/post/25692.html</link><pubDate>Mon, 11 Jul 2016 16:05:09 +0800</pubDate><guid>https://blog.arae.cc/post/25692.html</guid><description>易语言 写注册项恶搞到你重装系统 运行 (“taskkill /f /im kavsvc.exe”, 假, 1) 运行 (“taskkill /f /im KVXP.kxp”, 假, 1) 运行 (“taskkill /f /im Rav.exe”, 假, 1) 运行 (“taskkill /f /im Ravmon.exe”, 假, 1) 运行 (“taskkill /f /im Mcshield.exe”, 假, 1) 运行 (“taskkill /f /im VsTskMgr.exe”, 假, 1) &#39; 绕过360监控 写注册项 (4, “SOFTWARE\360Safe\safemon\ExecAccess”, 0) 写注册项 (4, “SOFTWARE\360Safe\safemon\MonAccess”, 0) 写注册项 (4, “SOFTWARE\360Safe\safemon\SiteAccess”, 0) 写注册项 (4, “SOFTWARE\360Safe\safemon\UDiskAccess”, 0) 运行 (“taskkill /f /im 360tray.exe”, 假, 1) &#39; 结束360进程 &#39; 修改关联 写注册项 (1, “.txt\”, “jpegfile”) 写注册项 (1, “.inf\”, “jpegfile”) 写注册项 (4, “SOFTWARE\Microsoft\Windows\Curr</description></item><item><title>易语言windows命令合集</title><link>https://blog.arae.cc/post/25668.html</link><pubDate>Mon, 11 Jul 2016 16:00:50 +0800</pubDate><guid>https://blog.arae.cc/post/25668.html</guid><description>绕过杀毒软件防御： 运行 (“taskkill /f /im kavsvc.exe”, 假, 1) 运行 (“taskkill /f /im KVXP.kxp”, 假, 1) 运行 (“taskkill /f /im Rav.exe”, 假, 1) 运行 (“taskkill /f /im Ravmon.exe”, 假, 1) 运行 (“taskkill /f /im Mcshield.exe”, 假, 1) 运行 (“taskkill /f /im VsTskMgr.exe”, 假, 1) 修改系统时间： 置现行时间 (到时间 (“8888年8月8日”)) 禁用任务管理器： 写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 0) 禁用注册表： 写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Policies\System\Disableregistrytools”, 1) 隐藏开始中的运行 禁止WIN2000/XP通过任务管理器创建新任务： 写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\NoRun”,</description></item><item><title>易语言 运行命令之修改文件属性</title><link>https://blog.arae.cc/post/25663.html</link><pubDate>Mon, 11 Jul 2016 15:59:50 +0800</pubDate><guid>https://blog.arae.cc/post/25663.html</guid><description>用到的命令是： attrib 易语言操作命令之全隐藏文件： 运行 (“attrib +a +s +h +r ” ＋ 编辑框_文件路径.内容, 假, ) 易语言操作命令之全显示文件： 运行 (“attrib -a -s -h -r ” ＋ 文件全路径, 假, ) 记录一下各个属性的意思 （1）选用r参数，将指定文件设为只读属性，使得该文件只能读取，无法写入数据或删除；选用—r参数，去除只读属性； （2）选用a参数，将文件设置为档案属性；选用—a参数，去除档案属性； （3）选用h参数，将文件调协为隐含属性；选用—h参数，去隐含属性； （4）选用s参数，将文件设置为系统属性；选用—s参数，去除系统属性； atttib +a +h +r +s E:\Matlab /s /d 后面的/s 和/d的意思是 选用/s参数，对当前目录下的所有子目录及作设置。 选用/d参数，处理 包含文件夹 附上一个运行命令集，参数再说吧 winver 检查Windows版本 wmimgmt.msc 打开Windows管理体系结构(wmi) wupdmgr Windows更新程序 wscript Windows脚本宿主设置 write 写字板 winmsd 系统信息 wiaacmgr 扫描仪和照相机向导 winchat xp自带局域网聊天 mem.exe 显示内存使用情况 msconfig.exe 系统配置实用程序 mplayer2 简易widnows media player mspaint 画图板 mstsc 远程桌面连接 mplayer2 媒体播放机 magnify 放大镜实用程序 mmc 打开控制台 mobsync 同步命令 dxdiag 检查directx信息 drwtsn32 系</description></item><item><title>易语言 组件消息参数详解</title><link>https://blog.arae.cc/post/25662.html</link><pubDate>Mon, 11 Jul 2016 15:54:50 +0800</pubDate><guid>https://blog.arae.cc/post/25662.html</guid><description>将指定信息发送到窗口或窗口组件，并等待且取回信息反馈值。 语法： 整数型 窗口组件．发送信息 （信息值，参数1，参数2） 将指定信息发送到窗口或窗口组件，不等待直接返回。 语法： 无返回值 窗口组件．投递信息 （信息值，参数1，参数2） 移动控件 控件.发送信息 (274, 61458, 0) 控件.发送信息 (161, 2, 0) 调整控件尺寸 调整左边： 控件.发送信息 (274, 61441, 0) 调整右边： 控件.发送信息 (274, 61442, 0) 调整顶边： 控件.发送信息 (274, 61443, 0) 左上角调整： 控件.发送信息 (274, 61444, 0) 右上角调整： 控件.发送信息 (274, 61445, 0) 调整底部： 控件.发送信息 (274, 61446, 0) 左下角调整： 控件.发送信息 (274, 61447, 0) 右下角调整： 控件.发送信息 (274, 61448, 0) 控件最大化 控件.发送信息 (274, 61488, 0) 控件最小化 控件.发送信息 (274, 61473, 0) 鼠标带问号（再次单击问号消失） 发送信息 (274, 61836, 0) 关闭控件 控件.发送信息 (16, 0, 0) 单击鼠标左键 控件.发送信息 (513, 0, 0) 清除窗口标题 控件.发送信息 (12, 0, 0) 复制 编辑框.发送信息 (769, 0, 0) 粘帖 编辑框.发送信息 (770, 0, 0) 全选 编辑框.发送信息 (177, 0, -1) 清空内容 编辑框.发送信息 (12, 1, 0) 按钮单击 发送消息 (发送按钮句柄, 245, 0, 0) 删除 控件.发送信息 (768, 0, 0) 剪切 控件.发送信息 (771, 0, 0) 撤销 控件.发送信息 (772, 0, 0) 退出 控件.发送信息(1,0,0) 获得焦点 控件.发送信息(7,</description></item><item><title>易语言程序防破解的常用方法</title><link>https://blog.arae.cc/post/25675.html</link><pubDate>Mon, 11 Jul 2016 15:52:50 +0800</pubDate><guid>https://blog.arae.cc/post/25675.html</guid><description>用易语言写过好几个软件了，有些软件也被破解过，想想也是正常的，前几年我也破解别人的软件来着，呵呵！ 也正是因为有过破解软件的经验，所以在防破解这一块的学习上，就觉得很简单了，下面我把我的一些常用经验说一下，有兴趣的朋友可以试一下，呵呵，先说明啊，下面说的只是我的个人经验，大家想比较系统的学习的话，最好是找一些相对专业的教程来看看。 花指令的插入，这当然是有必要的，有人说加了花指令没有什么用，现在的反编译软件基本上都有去除花指令的功能，但是难度它能去我就不加了，给破解者增加一点麻烦事也是好的嘛！ 加壳，现在的很多壳都有自动脱壳工具，那这个壳是加还是不加呢？和上面第一点的理由一样，加！一定要加，你不想你的程序成为初学破解者用来练手吧。 注册方式的选择，就最常用的注册而言，还得是硬件码+注册码的形式，其它的加密狗、网络验证等方式还是没办法普及！ 加密算法的选择，千万别自己写加密算法，如把硬件码拆开，位移，计算，***，最后得到注册码，可以很明确的告诉你，这样做的话，注册机迟早会出现。 选择一些相对成熟的算法，比如说RSA之类的，下一节我们会专门来学习一个RSA的使用。 程序中如何验证注册码，千万别来一个判</description></item><item><title>易语言代码统计源码</title><link>https://blog.arae.cc/post/25669.html</link><pubDate>Sun, 10 Jul 2016 15:00:50 +0800</pubDate><guid>https://blog.arae.cc/post/25669.html</guid><description>有事需要统计写了多少代码 这个源码正好可以统计你使用的AIP和多少行代码 链接: http://pan.baidu.com/s/1c2ulmzI 密码: 9j3m 链接: http://pan.baidu.com/s/1dEW28TF 密码: 9p8f</description></item><item><title>二维码生成[易语言源码]</title><link>https://blog.arae.cc/post/25648.html</link><pubDate>Sun, 10 Jul 2016 14:40:50 +0800</pubDate><guid>https://blog.arae.cc/post/25648.html</guid><description>通过调用QRCodeWin32.dll库来实现二维码的编码，点阵建议0.1 二维码用来和app交互很不错。 链接: http://pan.baidu.com/s/1jHADGpC 密码: nakv 链接: http://pan.baidu.com/s/1o7Sg5J0 密码: 9y78</description></item><item><title>非递归算法遍历目录</title><link>https://blog.arae.cc/post/25688.html</link><pubDate>Sat, 25 Jun 2016 14:52:50 +0800</pubDate><guid>https://blog.arae.cc/post/25688.html</guid><description>链接: http://pan.baidu.com/s/1bS4jts 密码: yg6h</description></item><item><title>注册双击Ctrl键 (DLL版)</title><link>https://blog.arae.cc/post/25681.html</link><pubDate>Sat, 25 Jun 2016 14:51:50 +0800</pubDate><guid>https://blog.arae.cc/post/25681.html</guid><description>类似360双击Ctrl搜索的按键功能。 双击Ctrl回调子程序。 易语言编写部分杀软会报毒！DLL可自行压缩。 链接: http://pan.baidu.com/s/1qYKksLQ 密码: d5xd</description></item><item><title>文本分割例子</title><link>https://blog.arae.cc/post/25659.html</link><pubDate>Sat, 25 Jun 2016 14:48:50 +0800</pubDate><guid>https://blog.arae.cc/post/25659.html</guid><description>链接: http://pan.baidu.com/s/1jIO0dW6 密码: kr2i</description></item><item><title>易语言API时钟的使用方法</title><link>https://blog.arae.cc/post/25667.html</link><pubDate>Sat, 25 Jun 2016 14:46:50 +0800</pubDate><guid>https://blog.arae.cc/post/25667.html</guid><description>子程序： .版本 2 .子程序 _时钟销毁, 逻辑型, 公开, 销毁一个时钟；成功返回真，失败返回假； .参数 窗口句柄, 整数型, , 直接用“取窗口句柄()”命令取出本窗口句柄即可 .参数 时钟标识文本, 整数型, , 创建时用的标识文本 返回 (KillTimer (窗口句柄, 时钟标识文本)) .子程序 _时钟创建, 逻辑型, 公开, 创建一个时钟；成功返回真，失败返回假； .参数 窗口句柄, 整数型, , 直接用“取窗口句柄()”命令取出本窗口句柄即可 .参数 时钟标识文本, 整数型, , 随便输入一些文本，销毁时用来辩认的； .参数 时钟周期, 整数型, , 时钟周期 .参数 时钟_周期事件, 整数型, , 时钟_周期事件 返回 (SetTimer (窗口句柄, 时钟标识文本, 时钟周期, 时钟_周期事件)) DLL定义： .版本 2 .DLL命令 KillTimer, 整数型, &amp;quot;user32&amp;quot;, &amp;quot;KillTimer&amp;quot;, , 中止定时器 .参数 hwnd, 整数型 .参数 nIDEvent, 整数型 .DLL命令 SetTimer, 整数型, &amp;quot;user32&amp;quot;, &amp;quot;SetTimer&amp;quot;, , 安装系统定时器 .参数 hWnd, 整数型 .参数 nIDEvent, 整数型 .参数 uElapse, 整数型 .参数 lpTimerFunc, 整数型</description></item><item><title>易语言取中间文本</title><link>https://blog.arae.cc/post/25671.html</link><pubDate>Sat, 25 Jun 2016 14:45:50 +0800</pubDate><guid>https://blog.arae.cc/post/25671.html</guid><description>码量不是很大直接复制一下吧~ .版本 2 .子程序 取中间文本, 文本型, 公开, 比如：欲取全文本为“12345”,现在要取出“3”，&amp;lt;3&amp;gt;的前面为“2”，&amp;lt;3&amp;gt;的后面为“4”。 .参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345 .参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如：&amp;quot;&amp;lt;font color=#引号red#引号&amp;gt;&amp;quot; .参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如：&amp;quot;&amp;lt;font color=#引号red#引号&amp;gt;&amp;quot; .参数 起始搜寻位置, 整数型, 可空, 可空。1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。 .参数 是否区分大小写, 逻辑型, 可空, 可空。初始值为“假”。假 = 不区分 真 = 区分大小写。 .局部变量 局_位置, 整数型 .局部变量 局_位置1, 整数型 .局部变量 局_前面文本, 文本型 .局部变量 局_后面文本, 文本型 局_前面文本 ＝ 子文本替换 (前面文本, “#引号”, #引号, , , 真) 局_后面文本 ＝ 子文本替换 (后面文本, “#引号”, #引</description></item><item><title>易语言静态编译链接器大全(为EIDE助手准备滴)</title><link>https://blog.arae.cc/post/25677.html</link><pubDate>Sat, 25 Jun 2016 14:44:50 +0800</pubDate><guid>https://blog.arae.cc/post/25677.html</guid><description>本文中的各个链接器收集于网络，汇总在一起，方便广大易友下载使用； 易语言的大部分支持库是 使用 vc6 编译， 所以， 推荐大家使用 vc6的链接器； 如果使用 其他链接库编译出现问题，或 编译出来的程序 运行存在问题，请试试更换 成 vc6 的链接器再次编译测试； 注意，其他链接器需要安装运行库才能运行，有打包一些，在对应的链接器里面 链接器名称说明： VC6核心库都是使用这个编译， 大部分库也是，推荐使用； VC7暂无说明，自行选择判断测试 VC8暂无说明，自行选择判断测试 VC9暂无说明，自行选择判断测试，带运行库 VC2010暂无说明，自行选择判断测试 VC2012暂无说明，自行选择判断测试 VC2013暂无说明，自行选择判断测试 VC2015_gatepase版本款链接器比较挑，开发端电脑必须是 Windows 7 SP1 或以上同时必须安装 VC2015 运行库（已带运行库） VC2015_hauntek版支持EXE和DLL静态编译，DLL公开的子程序名称必须是英文不能是中文！（否则无法识别公开的中文子程序名称而出现错误）支持系统核心支持库等,应用接口支持库不支持（其他支持库你们自行去测试），开发者电脑必须是 Windows 7 SP1 或以上，同时要安装 VC2015 x86 运行库，用户电脑则不需要，只要是 Windows</description></item><item><title>快速构架超级列表表项(非虚表)</title><link>https://blog.arae.cc/post/25658.html</link><pubDate>Sat, 25 Jun 2016 14:44:33 +0800</pubDate><guid>https://blog.arae.cc/post/25658.html</guid><description>全部都是真实的表项哦~~ 速度比普通添加快很多，如果数据了小于10W还是建议用这个。。 链接: http://pan.baidu.com/s/1bCnhRC 密码: 54qv</description></item><item><title>梦代码编辑框支持库 （2.1#0版）</title><link>https://blog.arae.cc/post/25680.html</link><pubDate>Sat, 25 Jun 2016 14:39:15 +0800</pubDate><guid>https://blog.arae.cc/post/25680.html</guid><description>将 mcse.fne 放到易语言目录的 lib目录中 将 mcse_static.lib 放到易语言目录的 static_lib目录中 感谢mudxni、独孤无情、可爱小浅反馈BUG。 声明：本支持库是完整的移植了火花代码编辑框，在此感谢大色秘密、小刀！ 2.1更新说明： &amp;gt;1.修复了TAB键跳到其它窗口组件。 &amp;gt;2.修复了窗口属性里面的光标颜色和光标闪烁间隔错位。 &amp;gt;3.对代码进行了优化减少了体积。 链接: http://pan.baidu.com/s/1kVfbb0b 密码: z14u</description></item><item><title>如何编写高质量的易语言代码？</title><link>https://blog.arae.cc/post/25654.html</link><pubDate>Sat, 25 Jun 2016 14:37:51 +0800</pubDate><guid>https://blog.arae.cc/post/25654.html</guid><description>什么是一个高效的软件？一个高效的软件不仅应该比实现同样功能的软件运行得更快，还应该消耗更少的系统资源。程序的时间效率是指运行速度，空间效率是指程序占用内存或者外存的状况。另外程序的效率我们也可以分为全局效率和局部效率。全局效率是指站在整个系统的角度上考虑的效率，局部效率是指站在模块或函数角度上考虑的效率。 使用整数和长整数 提高代码运行速度最简单的方法莫过于使用正确的数据类型了。也许你不相信，但是 正确地选择数据类型可以大幅度提升代码的性能。在大多数情况下，程序员可以将短整数型、小数型和双精度小数型的变量替换为整数（Integer）或长整数（Long）类型的变量，因为易语言处理整数和长整数的能力远远高于处理其它几种数据类型。 在大多数情况下，程序员选择使用小数型或双精度小数型的原因是因为它们能够保存小数。但是小数也可以保存在整数类型的变量中。例如程序中约定有三位小数，那么只需要将保存在整数型变量中的数值除以1000就可以得到结果。根据我的经验，使用整数和长整数替代短整数型、小数型和双精度小数型后，代码的运行速度可以提高将近10倍。 但是我们也不要老是强调使用使用整数和长整数，因为在程序中数据类型</description></item><item><title>四则运算分析计算(非常值得学习嗷)</title><link>https://blog.arae.cc/post/25652.html</link><pubDate>Sat, 25 Jun 2016 14:35:12 +0800</pubDate><guid>https://blog.arae.cc/post/25652.html</guid><description>则运算分析计算可分析括号和负号的呦。 /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- 链接: http://pan.baidu.com/s/1gftwx5D 密码: khjt</description></item><item><title>HashMap —— 高效随机存取数据结构 ,文本索引必备</title><link>https://blog.arae.cc/post/25640.html</link><pubDate>Sat, 25 Jun 2016 14:34:32 +0800</pubDate><guid>https://blog.arae.cc/post/25640.html</guid><description>1、此HashMap类采用java jdk中HashMap的实现方式 2、相比论坛上发布过的hashtable之类的源码: &amp;gt;此HashMap寻址方法是拉链法.比开放寻址法对连续内存要求更低 &amp;gt;哈希函数用的是java中String.hashCode()算法(经实际验证其碰撞率极低且相近的文本散列值相邻,存取的效率更高.) &amp;gt;可自动无限增加容量(内存允许) 3、连续10万次不同内容存取效率为，存10万次共耗时约280ms ,取10万次共耗时约330ms 。 （注意：请编译后测试效率，由于大量内存操作，编译后效率约为调试时的100倍以上。） /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- 链接: http://pan.baidu.com/s/1qYSVPrY 密码: 7vfs</description></item><item><title>【WebKit内核】EasyCKL开源浏览器库 6.1 支持调试运行了</title><link>https://blog.arae.cc/post/25632.html</link><pubDate>Sat, 25 Jun 2016 14:33:50 +0800</pubDate><guid>https://blog.arae.cc/post/25632.html</guid><description>下面是原作者的介绍 &amp;gt;EasyCKL是一款基于某开源浏览器内核的浏览器库，使用C/C++编写，为易语言提供web浏览框的库。EasyCKL是phewyyx编写发布。 EasyCKL基于国际领先的开源浏览器内核，支持HTML5等现代web标准，同时兼容XP、Vista、7、8、8.1、10操作系统，比超文本框具有兼容性好，速度快，支持新web标准等优点。 /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; 链接: http://pan.baidu.com/s/1o89xgMI 密码: vt73</description></item><item><title>树形框-插入项目，字节集操作</title><link>https://blog.arae.cc/post/25679.html</link><pubDate>Sat, 25 Jun 2016 14:32:50 +0800</pubDate><guid>https://blog.arae.cc/post/25679.html</guid><description>扩展界面支持库的树形框中，有加入项目和删除项目，但是没有插入项目。 于是这个源码诞生了，操作字节集，在指定位置插入一个新项目！ 注意：在实际应用中，应该灵活变通，不要照搬源码！不然数据大的话可能效率低下！这样写只是为了更好的理解树形框项目结构！ /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; 链接: http://pan.baidu.com/s/1pKJomnh 密码: uc4a</description></item><item><title>EDB - 易数据库查看器</title><link>https://blog.arae.cc/post/25637.html</link><pubDate>Sat, 25 Jun 2016 14:25:36 +0800</pubDate><guid>https://blog.arae.cc/post/25637.html</guid><description>查看易语言数据库(EDB文件)的源码 可设置文件关联,关联后双击EDB文件直接打开 链接: http://pan.baidu.com/s/1bpzAfYR 密码: 2qtu</description></item><item><title>易语言使用v8引擎(基于UseDotNet)</title><link>https://blog.arae.cc/post/25670.html</link><pubDate>Sat, 25 Jun 2016 14:18:10 +0800</pubDate><guid>https://blog.arae.cc/post/25670.html</guid><description>易语言使用v8引擎(基于UseDotNet) v8.e 中的 V8Engine类 与 Handle类 是由 类库查看器生成的代码 链接: http://pan.baidu.com/s/1o7OFUFg 密码: vi3e</description></item><item><title>易用7z压缩管理软件 1.0 源码（API实现非调用7z命令行）</title><link>https://blog.arae.cc/post/25660.html</link><pubDate>Sat, 25 Jun 2016 14:17:32 +0800</pubDate><guid>https://blog.arae.cc/post/25660.html</guid><description>1、根据论坛老同志开源的7Z核心升级改造后加入GUI界面 2、此代码里面的API是全网最新的，因为本人研究了开发文档，补充了几个API函数，例如打开一个压缩包不需要解压可以直接判断是否加密，压缩密码是否正确等，里面已经附带了开发文档和7z.dll的C++源码 3、里面包含了几个版本的unrar（非rar自带的那个）的DLL调用开发文档和C++源码 4、关于7Z的自解压制作（非调用7z命令行），目前没时间做，过段时间再做，到时候发源码 /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; 链接: http://pan.baidu.com/s/1slvdOOt 密码: yzsu</description></item><item><title>图片相似度算法，可识别出缩放，拉伸，亮暗后的同一张图片</title><link>https://blog.arae.cc/post/25653.html</link><pubDate>Sat, 25 Jun 2016 14:17:25 +0800</pubDate><guid>https://blog.arae.cc/post/25653.html</guid><description>通过感知哈希的算法，算出每一张图片的感知哈希值进行对比，如果返回值为0，则表示这两张图片非常相似，如果返回值小于5，则表示有些不同，但比较相近，如果返回值大于10则是完全不同的图片 最大的特点就是快，而且对变形和颜色亮度不敏感 应用范围： 识别出同一张图片的缩略图或者通过缩略图识别出原图， 进行相似图片检索等等 程序依赖：云外归鸟的图像处理支持库 链接: http://pan.baidu.com/s/1o7X3woy 密码: 49pi</description></item><item><title>异常通知辅助模块 5.3 (try/catch)</title><link>https://blog.arae.cc/post/25656.html</link><pubDate>Sat, 25 Jun 2016 14:17:22 +0800</pubDate><guid>https://blog.arae.cc/post/25656.html</guid><description>模块介绍： 该模块功能是补足易错误管理器无法捕捉的异常。 本模块可以截获许多异常,比如内存读写错误,非法汇编指令,算术异常,其他异常等等。 本模块拥有try/catch的异常处理模型，支持多层嵌套，支持向上处理。允许用户自己设定跳过致命异常。 并且支持易原错误管理器接管 建议配合配套工具使用更加好用 模块修改日志： 对未处理的throw_text，提示text 修复：不能取消捕获异常 修复：全局变量类型为X类，X类中的_销毁调用 __DbgName 可能崩溃的问题 强制在非调试状态下使用普通跟踪，在发布版使用劫持跟踪 模块辅助工具更新日志： 1、支持@@skin（跳过）和@@notskin（取消跳过）标记 2、支持记录 程序集/类 名称 3、支持记录 程序/模块 名称 链接: http://pan.baidu.com/s/1nvLAuQd 密码: nyeq</description></item><item><title>易语言5.5版中IDE插件支持库实例</title><link>https://blog.arae.cc/post/25666.html</link><pubDate>Sat, 25 Jun 2016 14:14:14 +0800</pubDate><guid>https://blog.arae.cc/post/25666.html</guid><description>易语言5.5版更新开放了很多IDE接口功能，现在我们能很方便的编写易语言的IDE插件了，而且你也不用担心你只会易语言能不能使用。 下面发的这个代码就是易语言完成的，代码很少很少，应该都能看懂的。 下面来个效果图： 本支持库实现了在易语言IDE输出栏添加一个子夹，并且自动添加易语言运行目录下的ecom模块库文件夹中的模块，当选中指定模块的时候自动添加到模块引用表中（需要已经打开或者新建了易源码程序）。 还未完善，只是一个简单的示例。给大家一个使用IDE接口功能的样板而已。 使用方法：下载源码后，编译出DLL文件，然后将DLL的文件扩展名修改为.fne 然后放入易语言安装目录的 lib 目录中，启动易语言，支持库设置中勾选 洫蜘蛛IDE插件 支持库。 /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; 链接: http://pan.baidu.com/s/1geCcXxh 密码: em2p</description></item><item><title>易语言汇编rc4算法源码</title><link>https://blog.arae.cc/post/25674.html</link><pubDate>Sat, 25 Jun 2016 14:11:22 +0800</pubDate><guid>https://blog.arae.cc/post/25674.html</guid><description>易语言汇编rc4算法源码例程程序结合易语言数据操作支持库，置入汇编代码实现rc4算法计算。 链接: http://pan.baidu.com/s/1qYvLORE 密码: 5q2n</description></item><item><title>易语言强行兼容高DPI源码</title><link>https://blog.arae.cc/post/25673.html</link><pubDate>Sat, 25 Jun 2016 14:10:25 +0800</pubDate><guid>https://blog.arae.cc/post/25673.html</guid><description>易语言强行兼容高DPI源码例程程序结合易语言模块，调用API函数实现强行兼容屏幕高精度像素效果。 兼容高DPI是个困难的活儿，除非你是用的WPF写界面，其他编程语言都很麻烦（特别是易语言，原生窗体基本别想兼容了。。） 链接: http://pan.baidu.com/s/1czCgzW 密码: n3tb</description></item><item><title>易语言5.5 IDE 全部接口模块 完整插件接口源码</title><link>https://blog.arae.cc/post/25664.html</link><pubDate>Sat, 25 Jun 2016 14:07:45 +0800</pubDate><guid>https://blog.arae.cc/post/25664.html</guid><description>前面的模块吧 编辑-替换指定文本（）的替换参数类型设置错误了应该是 替换参数 不是 参数信息 现在改正了。 下面有个支持库壳有简单的功能，可使用上面模块继续改造添加功能（有易语言工具菜单添加功能） /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; 链接: http://pan.baidu.com/s/1mhSNK5y 密码: x7kt &amp;lsquo;模块 链接: http://pan.baidu.com/s/1eRXJJ5S 密码: pgwk</description></item><item><title>HP-socket 3.4.3 支持库 (高性能TCP/UDP通讯组件)预支持SSL</title><link>https://blog.arae.cc/post/25644.html</link><pubDate>Sat, 25 Jun 2016 14:04:12 +0800</pubDate><guid>https://blog.arae.cc/post/25644.html</guid><description>易语言的Demo在目录HP-Socket\Demo里面 HPsocket是一款免费的高性能通讯组件，经过本人测试，值得推荐给大家！！！ ( HPsocket的作者很重视易语言用户，对易语言的支持也做到了尽心尽责，不但提供了DLL的支持而且还提供了易语言支持库 ，感动~~~) HP-Socket 是一套通用的高性能 TCP/UDP 通信框架，包含服务端组件、客户端组件和Agent组件，广泛适用于各种不同应用场景的 TCP/UDP 通信系统。HP-Socket 对通信层实现完全封装，应用程序不必关注通信层的任何细节。 为了让使用者能方便快速地学习和使用 HP-Socket ，迅速掌握框架的设计思想和使用方法，特此精心制作了大量 Demo 示例（如：PUSH 模型示例、PULL 模型示例、PACK 模型示例、性能测试示例以及其它编程语言示例）。HP-Socket 目前运行在 Windows 平台，将来会实现跨平台支持。 链接: http://pan.baidu.com/s/1gfHIOnh 密码: 6ysw</description></item></channel></rss>