<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on ARAE</title><link>https://arae.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA.html</link><description>Recent content in 计算机 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 22 Oct 2016 20:13:36 +0800</lastBuildDate><atom:link href="https://arae.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>计算机更新这么快，怎么编程语言还是二十多年前的？</title><link>https://arae.cc/post/25753.html</link><pubDate>Sat, 22 Oct 2016 20:13:36 +0800</pubDate><guid>https://arae.cc/post/25753.html</guid><description>刚刚看了《Hackers &amp;amp; Painters》觉得里面讲lisp语言未来会流行的那部分理论很有意思，也很有说服力。 下面讲讲我自己的想法： 机器性能本身是贬值的，按照摩尔定律，平均过去大约是每过18个月就能以原先一半的价钱买到相同性能的CPU，相对于这种贬值速度，人力资源的价值可以认为是固定不变的，也就是说人力资源相比于机器性能的价值越来越高。 所以人们在开发软件的过程中，相比于过去，越来越不重视代码的优化，具体可以参见Andy and Bill’s Law。 但是按这种逻辑，编程语言也会越来越接近自然语言，学习门槛越来越低，但是运行性能也越来越低。可是目前流行的编程语言都是很早以前发明的，都是设计给那时候的计算机运行的，为什么它们没有被现在发明的语言所淘汰？ 各种热门语言的发明时间(排名不分先后，也未包含所有热门编程语言)： Python 1991 Java 1995 Ruby 1990 PHP 1994 Javascript 1995 R 1993 而且奇怪的是这几种语言都集中在1990～1995之间。 发明得早的语言，并不等于为当时的机器设计的语言。发明得早的语言，现在还活跃的并不是它的最初版，而是持续改进后的成果。事实上，过去编程语言流行有过三次浪潮，驱动力各不相同。 第一波是50~70年代，这一波是数学驱</description></item></channel></rss>