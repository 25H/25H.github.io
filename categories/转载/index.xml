<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>转载 on ARAE</title><link>https://arae.cc/categories/%E8%BD%AC%E8%BD%BD.html</link><description>Recent content in 转载 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Jun 2018 15:26:38 +0800</lastBuildDate><atom:link href="https://arae.cc/categories/%E8%BD%AC%E8%BD%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript如何判断变量是数组还是对象</title><link>https://arae.cc/post/25792.html</link><pubDate>Fri, 15 Jun 2018 15:26:38 +0800</pubDate><guid>https://arae.cc/post/25792.html</guid><description>方法一 通过判断变量的类型，并且变量的length属性(除了有一种例外是arguments对象–当给函数传参时数据存储的地方) var arr=[2,3,4]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; console.log(typeof arr); //object console.log(typeof obj); //object console.log(arr.length); //3 console.log(obj.length); //undefined console.log(obj.name); //maomao //这里说明在对象中并没有length属性，所以是未定义。 方法二 使用toString方法将对象转换成其他类型的string，该例很好的证明了arguments对象不是数组，而是对象 var arr=[2,3,4]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; // console.log(arr.toString()); //&#39;2,3,4&#39; // console.log(obj.toString()); //[object Object] function sum(a,b){ // console.log(arguments); // console.log(typeof arguments); //object // console.log(arguments.length); //2 根据具体调用函数传的实参决定 // console.log(arguments.toString()); //[object Arguments] return a+b; } alert(sum(3,4)); 方法三 —&amp;gt;不可行 instanceof 指出对象是否是特定类的一个实例。 结论:instanceof 检测一个对象A是不是另一个对象B的实例的原理是：查看对象B的prototype指向的对象是否在对象A的[[prototype]]链上。如果在，则返回true,如果不在则返回false。不过有一个特殊的情况，当对象B的prototype为null将会报错(类似于空指针异常)。 var arr=[2,3,4,&amp;quot;haa&amp;quot;]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; console.log(arr instanceof Array); //true console.log(obj instanceof Object); //true console.log(arr instanceof Object); //true // ---这里跟网上的不同，不知道是什么原因 console.log(obj instanceof Array); //false 方法四 ECMAScript 5中可以使用isArray来判断 var arr=[2,3,4,&amp;quot;haa&amp;quot;]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; console.log(Array.isArray(arr)); //true console.log(Array.isArray(obj)); //false //注意没有isObject这种方法 暂时 方法五 使用isPrototypeOf()函</description></item><item><title>12 个免费图片快速优化和压缩工具</title><link>https://arae.cc/post/25790.html</link><pubDate>Sun, 27 May 2018 08:56:28 +0800</pubDate><guid>https://arae.cc/post/25790.html</guid><description>图像压缩工具允许轻松的进行压缩，编辑和调整图片大小。这些工具支持多种图像格式，如JPEG，PNG，GIF，可以重新大小根据您的需要他们，让您的网站和 Web 应用程序的拥有更快的载入速度。 在这里，编制了12个最佳的图片压缩工具，所有这些都将帮助你压缩你的网站上的图像，节省带宽和提高网站的性能。 1. JPEGMini JPEGmini是一项正在申请专利的照片再压缩技术，可显着缩小照片尺寸而不影响其感知质量。 该技术适用于基准JPEG领域，可生成与任何浏览器，照片软件或支持标准JPEG格式的设备完全兼容的文件。 2. Shrink O’ Matic Shrink O’ Matic是一款AIR应用程序，可轻松（批量）调整图像大小（缩小）。 它处理JPG，GIF和PNG。 只需拖放图像，就可以随意调整大小！ 选项允许您选择输出大小，旋转（支持EXIF数据），名称和位置，格式和水印。 3. Riot Radical Image Optimization Tool（简称RIOT）是一款免费的图像优化工具，可让您在保持最小文件大小的同时在视觉上调整压缩参数。 它使用并排（双视图）或单视图界面来实时比较原始图像和优化图像，并即时查看生成的文件大小。 它轻巧，快速且简单易用，但对于高级用户而言功能强大。 您将能够控制压缩，颜色数量，元数据设置等等，</description></item><item><title>jquery判断图片或者背景图片加载完毕</title><link>https://arae.cc/post/25771.html</link><pubDate>Thu, 15 Feb 2018 13:37:24 +0800</pubDate><guid>https://arae.cc/post/25771.html</guid><description>前端开发制作中有需要需要等到页面中的图片加载完毕后才执行某些事件，而使用jquery的load事件只是dom执行完毕，图片未必加载完成，如果要判断图片加载完毕，需要在图片标签上判断。 使用JavaScript判断图片加载完毕，如果图片在页面中的某个img标签中的话，可以用下面这个 $(&#39;img&#39;).on(&#39;load&#39;, function() { alert(&#39;new image loaded: &#39; + this.src); }); 原生js imgNode.onload = () =&amp;gt; { alert(&#39;new image loaded: &#39; + this.src); }; （1）、单张图片（图片在文档中） // HTML &amp;lt;img id=&#39;pic&#39; src=&amp;quot;../03.png&amp;quot;&amp;gt; //js $(document).ready(function(){ //jquery $(&#39;#pic&#39;).load(function(){ // 加载完成 }); //原生 onload var pic = document.getElementById(&#39;pic&#39;) pic.onload = pic.onreadystatechange = function(){ if(!this.readyState||this.readyState==&#39;loaded&#39;||this.readyState==&#39;complete&#39;){ // 加载完成 } }; }) 注： 1、IE8及以下版本不支持onload事件，但支持onreadystatechange事件； 2、readyState是onreadystatechange事件的一个状态，值为loaded或complete的时候，表示已经加载完毕。 3、如果引入jquery库可以考虑直接使用jquery的load事件来解决兼容问题。 （2）、单张图片（图片动态生成） //js var pic = new Image() pic.src = &#39;../03.png&#39; pic.onload = pic.onreadystatechange = function(){ if(!this.readyState||this.readyState==&#39;loaded&#39;||this.readyState==&#39;complete&#39;){ // 加载完成 } }; //jquery $(&#39;&amp;lt;img/&amp;gt;&#39;).attr(&#39;src&#39;, &#39;../03.png&#39;).on(&#39;load&#39;, function() { $(this).remove(); // 防止内存泄露 //图片加载完毕 }); （3）、单张图片（结合ES6 Promise） //js new Promise((resolve, reject)=&amp;gt;{ let pic = new Image() pic.src = &#39;../03.png&#39; pic.onload = function(){ // 加载完成 resolve(pic) } }).then((pic)=&amp;gt;{ //code }) （4）、多张图片 var img = [], flag = 0,</description></item><item><title>易语言-&gt;编程基础知识-&gt;数据类型</title><link>https://arae.cc/post/25761.html</link><pubDate>Wed, 20 Sep 2017 18:59:29 +0800</pubDate><guid>https://arae.cc/post/25761.html</guid><description>数据类型： 各种数值的数据都在内存中占用一定的存储空间。字节（byte) 是系统中最基本存储单位。数据类型所占字节数越多，所能够容纳数值的范围就越大。 数据类型的概念： 数据：是指能够输入到计算机中，并能够被计算机识别和加工处理的符号的集合，是程序处理的最小对象。例如：数值、字符、图形、图像和声音等都是数据。数据在程序中以常量或变量的方式被引用，不同的数据特点有不同的存储要求和处理算法。 上小学时，我们学过自然数，小数，分数等，其中，1,2,3这样的数叫自然数；-2，-1，0，1，2等的数叫整数；1.1，1.3，1.4，1.66这样的数叫小数。把数据进行这样的区分，在电脑语言里被称做数据类型。 易语言的数据类型从数据结构来区分，可分为基本数据类型、特殊数据类型。 基本数据类型有6种，包括数值型、逻辑型、日期时间型、文本型、字节集型、子程序指针型。 数值型数据又包括了字节型、短整数型、整数型、长整数型、小数型、双精度小数型。数值型数据都是由0-9数字，小数点组成的一个数值。 常用数据类型： 数据类型名称 占用字节 取值范围 字节型 1 0 ～ 255 短整数型 2 -32,768 ～ 32,767 整数型 4 -2,147,483,648 ～ 2,147,483,647 长整数型 8 -9,223,372,036,854,775,808 ～ 9,223,372,036,854,775,807 小数型 4 -3.4E38 ～ 3.4E38 (7位小数) 双精</description></item><item><title>易语言 取自定义数据类型的大小</title><link>https://arae.cc/post/25744.html</link><pubDate>Sat, 10 Sep 2016 01:37:11 +0800</pubDate><guid>https://arae.cc/post/25744.html</guid><description>先说一下易语言的变量储存机制 易语言有基本数据类型和复合数据类型两种 基本数据类型包括：1. 各种整数 2.各种浮点 3. 逻辑值 他们都是储存在栈上的 大小都是固定的 用不着取 复合类型一般储存在堆上 然后在栈上储存堆上数据的引用 其中有几种比较特殊：字符串 字节集 数组 这两种类型的大小虽然储存在堆上的某个地方 但都有专门的取大小函数 直接调用即可 剩下就是自定义数据类型 比如类或者结构 特别是类 类的数据成员都是私有的 假如你想知道别人写的一个模块里一个类的大小 不可能通过数数据成员的方法得到 那如何取到呢？有人可能提出用“取变量地址”这个函数 可惜的是 “取变量地址”取到的永远是栈上的地址 根据上面所说 栈上地址的内容就是堆上地址 但是易语言没有一个用指针取整数的函数 这就需要用一个系统api：RtlMoveMemory 这个函数跟c语言memcpy的功能一样 但是有了他问题就变得容易的多 声明一个整形变量a q是一个自定义的类或者结构 RtlMoveMemory (取变量地址 (a), 取变量地址 (q), 4) 这样a储存的就是ls在堆区的地址 之后用到一个api：LocalSize 我们都知道堆区内存分配必然用到LocalAlloc/GlobalAlloc 那么也能通过LocalSize取到大小 调</description></item><item><title>常用Windows消息、常量命名参考</title><link>https://arae.cc/post/25717.html</link><pubDate>Thu, 14 Jul 2016 21:22:27 +0800</pubDate><guid>https://arae.cc/post/25717.html</guid><description>在WIN系统常量里，一般会以两到三个字母加个下划线作为前缀，从这些前缀里就能知道是什么类型的常量。 一般情况下，第一个字母为控件的头一个字母，第二个字母是M的是消息(Message)常量，S是风格(Style)常量，N是通知、事件(Notify)。 下面列出一些常量的常量前缀，为大家以后使用API、常量等带来方便。 以下内容由(彬·泪闯天涯)整理，如果发现有什么错误请指正。 如果是使用VB、易语言等需要自己声明常量的开发工具，可以下载一些工具来查询、复制。 a b c WM_ Window Message 窗口消息，一般用在SendMessage，PostMessage这样的消息函数中 SM_ Static Message 静态标签消息 SS_ Static Style 静态标签风格 BM_ Button Message 按钮消息 BS_ Button Style 按钮风格 BN_ Button Notify 按钮通知 EM_ Edit Message 编辑框消息 ES_ Edit Style 编辑框风格 CB_ ComboBox 组合框消息 CBN_ ComboBox Notify 组合框通知 LBM_ ListBox Message 列表框消息 LBS_ ListBox Style 列表框风格 LBN_ ListBox Notify 列表框通知 LVM_ ListView Message 超级列表框(列表视图)消息 LVS_ ListView Style 超级列表框(列表视图)风格 LVN_ ListView Notify 超级列表框(列表视图)通知 TVM_ TreeView Message 树型框(树型视图)消息 TVS_ TreeView Style 树型框(树型视图)风格 TVN_ TreeView Notify 树型框(树型视图)通知 VK_ Virtual Keyboard 虚拟键、键代码</description></item></channel></rss>