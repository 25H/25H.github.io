<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>代码 on ARAE</title><link>https://arae.cc/tags/%E4%BB%A3%E7%A0%81.html</link><description>Recent content in 代码 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Jun 2018 15:26:38 +0800</lastBuildDate><atom:link href="https://arae.cc/tags/%E4%BB%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript如何判断变量是数组还是对象</title><link>https://arae.cc/post/25792.html</link><pubDate>Fri, 15 Jun 2018 15:26:38 +0800</pubDate><guid>https://arae.cc/post/25792.html</guid><description>方法一 通过判断变量的类型，并且变量的length属性(除了有一种例外是arguments对象–当给函数传参时数据存储的地方) var arr=[2,3,4]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; console.log(typeof arr); //object console.log(typeof obj); //object console.log(arr.length); //3 console.log(obj.length); //undefined console.log(obj.name); //maomao //这里说明在对象中并没有length属性，所以是未定义。 方法二 使用toString方法将对象转换成其他类型的string，该例很好的证明了arguments对象不是数组，而是对象 var arr=[2,3,4]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; // console.log(arr.toString()); //&#39;2,3,4&#39; // console.log(obj.toString()); //[object Object] function sum(a,b){ // console.log(arguments); // console.log(typeof arguments); //object // console.log(arguments.length); //2 根据具体调用函数传的实参决定 // console.log(arguments.toString()); //[object Arguments] return a+b; } alert(sum(3,4)); 方法三 —&amp;gt;不可行 instanceof 指出对象是否是特定类的一个实例。 结论:instanceof 检测一个对象A是不是另一个对象B的实例的原理是：查看对象B的prototype指向的对象是否在对象A的[[prototype]]链上。如果在，则返回true,如果不在则返回false。不过有一个特殊的情况，当对象B的prototype为null将会报错(类似于空指针异常)。 var arr=[2,3,4,&amp;quot;haa&amp;quot;]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; console.log(arr instanceof Array); //true console.log(obj instanceof Object); //true console.log(arr instanceof Object); //true // ---这里跟网上的不同，不知道是什么原因 console.log(obj instanceof Array); //false 方法四 ECMAScript 5中可以使用isArray来判断 var arr=[2,3,4,&amp;quot;haa&amp;quot;]; var obj={&amp;quot;name&amp;quot;:&amp;quot;maomao&amp;quot;,&amp;quot;age&amp;quot;:20}; console.log(Array.isArray(arr)); //true console.log(Array.isArray(obj)); //false //注意没有isObject这种方法 暂时 方法五 使用isPrototypeOf()函</description></item><item><title>jquery判断图片或者背景图片加载完毕</title><link>https://arae.cc/post/25771.html</link><pubDate>Thu, 15 Feb 2018 13:37:24 +0800</pubDate><guid>https://arae.cc/post/25771.html</guid><description>前端开发制作中有需要需要等到页面中的图片加载完毕后才执行某些事件，而使用jquery的load事件只是dom执行完毕，图片未必加载完成，如果要判断图片加载完毕，需要在图片标签上判断。 使用JavaScript判断图片加载完毕，如果图片在页面中的某个img标签中的话，可以用下面这个 $(&#39;img&#39;).on(&#39;load&#39;, function() { alert(&#39;new image loaded: &#39; + this.src); }); 原生js imgNode.onload = () =&amp;gt; { alert(&#39;new image loaded: &#39; + this.src); }; （1）、单张图片（图片在文档中） // HTML &amp;lt;img id=&#39;pic&#39; src=&amp;quot;../03.png&amp;quot;&amp;gt; //js $(document).ready(function(){ //jquery $(&#39;#pic&#39;).load(function(){ // 加载完成 }); //原生 onload var pic = document.getElementById(&#39;pic&#39;) pic.onload = pic.onreadystatechange = function(){ if(!this.readyState||this.readyState==&#39;loaded&#39;||this.readyState==&#39;complete&#39;){ // 加载完成 } }; }) 注： 1、IE8及以下版本不支持onload事件，但支持onreadystatechange事件； 2、readyState是onreadystatechange事件的一个状态，值为loaded或complete的时候，表示已经加载完毕。 3、如果引入jquery库可以考虑直接使用jquery的load事件来解决兼容问题。 （2）、单张图片（图片动态生成） //js var pic = new Image() pic.src = &#39;../03.png&#39; pic.onload = pic.onreadystatechange = function(){ if(!this.readyState||this.readyState==&#39;loaded&#39;||this.readyState==&#39;complete&#39;){ // 加载完成 } }; //jquery $(&#39;&amp;lt;img/&amp;gt;&#39;).attr(&#39;src&#39;, &#39;../03.png&#39;).on(&#39;load&#39;, function() { $(this).remove(); // 防止内存泄露 //图片加载完毕 }); （3）、单张图片（结合ES6 Promise） //js new Promise((resolve, reject)=&amp;gt;{ let pic = new Image() pic.src = &#39;../03.png&#39; pic.onload = function(){ // 加载完成 resolve(pic) } }).then((pic)=&amp;gt;{ //code }) （4）、多张图片 var img = [], flag = 0,</description></item><item><title>程序猿专用代码注释:佛祖保佑，永无BUG</title><link>https://arae.cc/post/25736.html</link><pubDate>Wed, 20 Jul 2016 02:17:56 +0800</pubDate><guid>https://arae.cc/post/25736.html</guid><description>逛论坛发现这个,实在是高上大啊 // _ooOoo_ // o8888888o // 88&amp;quot; . &amp;quot;88 // (| -_- |) // O\ = /O // ____/`---&#39;\____ // . &#39; \\| |// `. // / \\||| : |||// \ // / _||||| -:- |||||- \ // | | \\\ - /// | | // | \_| &#39;&#39;\---/&#39;&#39; | | // \ .-\__ `-` ___/-. / // ___`. .&#39; /--.--\ `. . __ // .&amp;quot;&amp;quot; &#39;&amp;lt; `.___\_&amp;lt;|&amp;gt;_/___.&#39; &amp;gt;&#39;&amp;quot;&amp;quot;. // | | : `- \`.;`\ _ /`;.`/ - ` : | | // \ \ `-. \_ __\ /__ _/ .-` / / // ======`-.____`-.___\_____/___.-`____.-&#39;====== // `=---=&#39; // // ............................................. // 佛祖保佑 永无BUG // 佛曰: // 写字楼里写字间，写字间里程序员； // 程序人员写程序，又拿程序换酒钱。 // 酒醒只在网上坐，酒醉还来网下眠； // 酒醉酒醒日复日，网上网下年复年。 // 但愿老死电脑间，不愿鞠躬老板前； // 奔驰宝马贵者趣，公交自行程序员。 // 别人笑我忒疯癫，我笑自己命太贱； // 不见满街漂亮妹，哪个归得程序员？</description></item><item><title>10个最“优秀”的代码注释</title><link>https://arae.cc/post/25729.html</link><pubDate>Fri, 15 Jul 2016 13:48:46 +0800</pubDate><guid>https://arae.cc/post/25729.html</guid><description>下面是stackoverflow网站上网友针对你看到过的最好的代码注释是什么样的？这个问题给出的回答的前10条： // 亲爱的维护者： // 如果你尝试了对这段程序进行‘优化’， // 并认识到这种企图是大错特错，请增加 // 下面这个计数器的个数，用来对后来人进行警告： // 浪费在这里的总时间 = 39h /** * 致终于来到这里的勇敢的人： 你是被上帝选中的人，英勇的、不辞劳苦的、不眠不修的来修改 我们这最棘手的代码的编程骑士。你，我们的救世主，人中之龙， 我要对你说：永远不要放弃，永远不要对自己失望，永远不要逃走，辜负了自己。 永远不要哭啼，永远不要说再见。永远不要说谎来伤害自己。 */ Exception up = new Exception(&amp;quot;Something is really wrong.&amp;quot;); throw up; // 一些修改1 - 2002/6/7 增加临时的跟踪登录界面 // 一些修改2 - 2007/5/22 我临时的犯傻 #define TRUE FALSE //逗一逗调试程序的傻瓜们 if (/*you*/ $_GET[&#39;action&#39;]) { //celebrate(恭喜) // 如果这段代码好用，那它是Paul DiLascia写的。 //如果不好用，我不知道是谁写的。 //写这段代码的时候，只有上帝和我知道它是干嘛的 //现在，只有上帝知道 // 晕了，以后再修改 // 神奇。勿动。 你有没有更绝的？</description></item><item><title>如何编写高质量的易语言代码？</title><link>https://arae.cc/post/25654.html</link><pubDate>Sat, 25 Jun 2016 14:37:51 +0800</pubDate><guid>https://arae.cc/post/25654.html</guid><description>什么是一个高效的软件？一个高效的软件不仅应该比实现同样功能的软件运行得更快，还应该消耗更少的系统资源。程序的时间效率是指运行速度，空间效率是指程序占用内存或者外存的状况。另外程序的效率我们也可以分为全局效率和局部效率。全局效率是指站在整个系统的角度上考虑的效率，局部效率是指站在模块或函数角度上考虑的效率。 使用整数和长整数 提高代码运行速度最简单的方法莫过于使用正确的数据类型了。也许你不相信，但是 正确地选择数据类型可以大幅度提升代码的性能。在大多数情况下，程序员可以将短整数型、小数型和双精度小数型的变量替换为整数（Integer）或长整数（Long）类型的变量，因为易语言处理整数和长整数的能力远远高于处理其它几种数据类型。 在大多数情况下，程序员选择使用小数型或双精度小数型的原因是因为它们能够保存小数。但是小数也可以保存在整数类型的变量中。例如程序中约定有三位小数，那么只需要将保存在整数型变量中的数值除以1000就可以得到结果。根据我的经验，使用整数和长整数替代短整数型、小数型和双精度小数型后，代码的运行速度可以提高将近10倍。 但是我们也不要老是强调使用使用整数和长整数，因为在程序中数据类型</description></item></channel></rss>