<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程 on ARAE</title><link>https://blog.arae.cc/tags/%E7%BC%96%E7%A8%8B.html</link><description>Recent content in 编程 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 12 Sep 2017 11:53:08 +0800</lastBuildDate><atom:link href="https://blog.arae.cc/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>什么是现代化编程？</title><link>https://blog.arae.cc/post/25759.html</link><pubDate>Tue, 12 Sep 2017 11:53:08 +0800</pubDate><guid>https://blog.arae.cc/post/25759.html</guid><description>在我的青少年时期，我涉猎了编程基础和一些汇编。当我学习了 Turbo Pascal 之后这事更进了一步，它提供了一种最早期的集成开发环境（IDE）。我觉得这下合我心意了。实际上，IDE 是一种让你在一个友好的环境内，方便地编写、编译、调试和运行代码的程序。Turbo Pascal 没有太多的图形界面（它基于文本），但它有菜单和窗口。你可以进入调试模式，跟踪变量的值等等。 然后我转到了 Delphi （一种图形化的 Turbo Pascal），它拥有到今天看来仍然不错的出色 IDE。我用 Visual Basic 设计了一个“会报时的钟”，当时发表在 Bulletin Board Systems（使用 Windows 3.1 的一个系统）。那之后我发现了 Visual Studio。有好几年我的 C++ 编程都是借用的 Visual Studio。以上就是我一直使用的所有 IDE。 早在八十年代初，Smalltalk 就有了著名的强大图形化 IDE（Youtube 视频）。 我认为，使用 IDE 并不代表着“现代化”。现在的 IDE 和过去的 IDE 非常相像。虽然我们编程的内容改变了，但在很多情况下，我们如何编程却没有改变。在我的 Dell 笔记本电脑里装着最新版 Visual Studio。换做 20 年前的我，也能完美地轻松上手它。调试、代码补全、远程代码执行，它和以前很像。事实上，Visual Studio 从未与 Turbo Pascal 相差很大过。而我</description></item><item><title>什么样的编程最难？编程中的快餐式和探路式</title><link>https://blog.arae.cc/post/25758.html</link><pubDate>Sat, 17 Dec 2016 09:49:28 +0800</pubDate><guid>https://blog.arae.cc/post/25758.html</guid><description>说到 技术 这个词，它看起来很深奥其实是你不了解罢了，有些所谓的技术实际上并不一定多么聪明，只不过了解得比你清楚罢了。 什么样的编程最难？ 写你不了解的东西。 举个例子，当你想写个EXE图标相关的程序，你就需要了解PE文件结构，还有EXE图标资源操作相关的现有API和接口。这就是一道门槛，难就难在你要查到相关资料，如果你能直接搜到现成可用的源代码，那是最幸运的。否则在不了解的情况下写，要么写不出来，要么只能用不那么正规的方法去实现，比如直接根据特征码进行操作。 写你不懂的东西。 这条和上面那条差不多，如果你要写的东西需要大量数学，而你数学也没学好，那么自然而然就会成为一道门槛。所以你就需要临时去学下你要用到的数学公式，可是首先你还要知道你需要用到哪些数学公式，所以本质上就等于写你不了解的东西。 写你需求不明确的东西。 你要写的是什么？如果你只能用抽象的概念来回答，那么当你写的时候就会发现，其实你连你的需求是什么都不知道。你要写的东西太复杂了，太万能了，太无限状态机了，没错，有限状态机很好写，可是如果你要写的是无限状态机，那也就是说，你要写的所有状态，你自己都不清楚，那你又要从哪里开始写呢？又要写到哪里是</description></item><item><title>计算机更新这么快，怎么编程语言还是二十多年前的？</title><link>https://blog.arae.cc/post/25753.html</link><pubDate>Sat, 22 Oct 2016 20:13:36 +0800</pubDate><guid>https://blog.arae.cc/post/25753.html</guid><description>刚刚看了《Hackers &amp;amp; Painters》觉得里面讲lisp语言未来会流行的那部分理论很有意思，也很有说服力。 下面讲讲我自己的想法： 机器性能本身是贬值的，按照摩尔定律，平均过去大约是每过18个月就能以原先一半的价钱买到相同性能的CPU，相对于这种贬值速度，人力资源的价值可以认为是固定不变的，也就是说人力资源相比于机器性能的价值越来越高。 所以人们在开发软件的过程中，相比于过去，越来越不重视代码的优化，具体可以参见Andy and Bill’s Law。 但是按这种逻辑，编程语言也会越来越接近自然语言，学习门槛越来越低，但是运行性能也越来越低。可是目前流行的编程语言都是很早以前发明的，都是设计给那时候的计算机运行的，为什么它们没有被现在发明的语言所淘汰？ 各种热门语言的发明时间(排名不分先后，也未包含所有热门编程语言)： Python 1991 Java 1995 Ruby 1990 PHP 1994 Javascript 1995 R 1993 而且奇怪的是这几种语言都集中在1990～1995之间。 发明得早的语言，并不等于为当时的机器设计的语言。发明得早的语言，现在还活跃的并不是它的最初版，而是持续改进后的成果。事实上，过去编程语言流行有过三次浪潮，驱动力各不相同。 第一波是50~70年代，这一波是数学驱</description></item><item><title>汉语编程能给我们带来什么？</title><link>https://blog.arae.cc/post/25752.html</link><pubDate>Sat, 22 Oct 2016 20:12:07 +0800</pubDate><guid>https://blog.arae.cc/post/25752.html</guid><description>每隔几天，就会有人在网媒上讨论中文编程的问题，甚至有编程的套件发布，每次都会引发一场大讨论。但是在程序员的圈子里，却很少看到有人关注这个话题。 为什么汉语编程这个话题总能引吸一些人的眼球呢？我们就开动脑筋，来想一想汉语编程能带来的好处。 1） 民族荣誉感增强，这种感觉就像是以后我们的子孙再也不用学习英文了，而是英国人，美国人，世界各国人民都挤破脑袋来学习汉语，中华民族可以把学习英语的大 把时间节约下来，去做更有意义的事情。这以后，你去国外旅游，当地人一听说你是中国来的，会说汉语，就好吃好喝好妹子的招待你，只求能和你有一个练习口语 的机会。万一你失业了，实在是找不着工作，你还可以找个地方传授别人通关汉语四六级的秘诀。 等到汉语编程取待英语编程的那一天，咱们一定要让老英老美把咱们中国人吃过的苦头挨个吃一遍。这个看来，上升到民族大义的高度，汉语编程还真值得下功夫。 2）汉语编程能降低中国人学习编程的门槛，中国的软件水平有机会领先世界。 对于第一点，帽子太大，我无法发表观点，大多数打着为国为民旗号的行动最后看来都是扯蛋，为自己才是真的。第二点中提到的降低中国人学习编程的门槛，看来更具现实意义。 但笔者调查发现，</description></item><item><title>一门编程语言的诞生总是有理由的</title><link>https://blog.arae.cc/post/25749.html</link><pubDate>Thu, 29 Sep 2016 15:35:39 +0800</pubDate><guid>https://blog.arae.cc/post/25749.html</guid><description>Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many, and how well, languages can be described this way. Algol: Assembly language is too low-level. Pascal: Algol doesn&amp;rsquo;t have enough data types. Modula: Pascal is too wimpy for systems programming. Simula: Algol isn&amp;rsquo;t good enough at simulations. Smalltalk: Not everything in Simula is an object. Fortran: Assembly language is too low-level. Cobol: Fortran is scary. PL/1: Fortran doesn&amp;rsquo;t have enough data types. Ada: Every existing language is missing something. Basic: Fortran is scary. APL: Fortran isn&amp;rsquo;t good enough at manipulating arrays. J: APL requires its own character set. C: Assemby language is too low-level. C++: C is too low-level. Java: C++ is a kludge. And Microsoft is going to crush us. C#: Java is controlled by Sun. Lisp: Turing Machines are an awkward way to describe computation. Scheme: MacLisp is a kludge. T: Scheme has no libraries. Common Lisp: There are too many dialects of Lisp. Dylan: Scheme has no libraries, and Lisp syntax is scary. Perl: Shell scripts/awk/sed are not enough like programming languages. Python: Perl is a kludge. Ruby: Perl is a kludge, and Lisp syntax is scary. Prolog: Programming is not enough like logic. 易语言: 以上所有语言都是英文编程，没有中文编程简单易懂。</description></item><item><title>我是如何走上编程的不归路的</title><link>https://blog.arae.cc/post/25741.html</link><pubDate>Thu, 08 Sep 2016 15:17:28 +0800</pubDate><guid>https://blog.arae.cc/post/25741.html</guid><description>正规读书十二载，在此之前从没接触过易语言，编程。至于是怎么走上编程这条路，并为之所倾心的，且听我细细道来。 那年，正是炫舞飞起的年代，各个网吧都是在玩炫舞、cf，你没个账号都不好意思和人家打招呼。那天，某场炫舞PK中，对手一直是perfect。噢，简直谢特啊！不敢相信！然后观战的围观群众就炸开锅了，他开G开G。当时也是太傻太年轻啊，啥也没争取，默认他赢了。比赛完后在心里默念，G是啥？开个G就这么牛了？ 百度之后，对开挂这类东西有了初步了解。想着，要是我自己也做一个，哈哈，他们就要称我为大神了。 说干就干，打开电脑就开始搜关键词：入门编程。结果哔了狗，广告占多数。 而且让人眼花缭乱，C++,PHP,JAVA，PCL等等。最主要的是，所有语言都是这么夸自己的：我是最好的入门教材！我是最好的语言！画外音：咱还能要点脸不？重点是英语水平不过关，我也看不懂啊。现在回想起来，英语水平并不是很关键的问题，多看看也就懂了。 又搜，这次在关键词中加入了中文二字，中文编程入门，搜出来易语言。我到现在都还记忆很深刻的记得当时搜出来的标题：易语言中文编程，从入门到精通。 回想起当时，为何选择的是易语言呢，原因有三。一，我</description></item></channel></rss>