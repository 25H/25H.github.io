<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>消息 on ARAE</title><link>https://arae.cc/tags/%E6%B6%88%E6%81%AF.html</link><description>Recent content in 消息 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 02 Mar 2018 19:09:22 +0800</lastBuildDate><atom:link href="https://arae.cc/tags/%E6%B6%88%E6%81%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP协议状态码</title><link>https://arae.cc/post/25777.html</link><pubDate>Fri, 02 Mar 2018 19:09:22 +0800</pubDate><guid>https://arae.cc/post/25777.html</guid><description>HTTP状态码 当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头(server header)用以响应浏览器的请求。 HTTP状态码的英文为HTTP Status Code。 1xx 信息/临时响应 表示临时响应并需要请求者继续执行操作的状态代码。 这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。 100 Continue 状态：继续 说明：请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。 101 Switching Protocols 状态：切换协议 说明：请求者已要求服务器切换协议，服务器已确认并准备切换。 服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不</description></item><item><title>Windows窗口消息大全</title><link>https://arae.cc/post/25715.html</link><pubDate>Thu, 14 Jul 2016 13:52:51 +0800</pubDate><guid>https://arae.cc/post/25715.html</guid><description>Windows窗口消息大全 ////////////////////////////////////////////////////////////////////////// #include &amp;quot;AFXPRIV.H&amp;quot;//消息值的定义来源 #include &amp;quot;Dde.h&amp;quot;//DDE消息值的定义来源 #include &amp;quot;CPL.H&amp;quot;//控制面板消息值的定义来源 #include &amp;quot;WFEXT.H&amp;quot;//文件管理器的消息值的定义来源 #include &amp;quot;vfw.h&amp;quot;//视频捕捉的消息值的定义来源 #include &amp;quot;ras.h&amp;quot;//RAS(远程访问服务)的消息值的定义来源 #include &amp;quot;imm.h&amp;quot;//输入法编辑器的消息值的定义来源 #include &amp;quot;tspi.h&amp;quot;//消息值的定义来源 #include &amp;quot;setupapi.h&amp;quot;//消息值的定义来源 ////////////////////////////////////////////////////////////////////////// #ifndef WM_SYSTIMER #define WM_SYSTIMER 0x0118 //(caret blink) #endif #define DRV_EXITAPPLICATION 0x000C //驱动程序消息相关 #define WM_HIBERNATE 0x03FF //WINCE独有的消息(内存资源限制相关) //窗口消息解码 #define IDSTR(MsgID) MsgID,#MsgID typedef struct { DWORD dwMsg; LPCTSTR szMsgText; LPCTSTR szNote; } t_MSGNOTE; static t_MSGNOTE messagesnote[] = { IDSTR(WM_NULL),&amp;quot;空消息,可检测程序是否有响应等&amp;quot;, IDSTR(WM_CREATE),&amp;quot;新建一个窗口&amp;quot;, IDSTR(WM_DESTROY),&amp;quot;销毁一个窗口&amp;q</description></item></channel></rss>