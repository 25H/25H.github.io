<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程序员 on ARAE</title><link>https://blog.arae.cc/tags/%E7%A8%8B%E5%BA%8F%E5%91%98.html</link><description>Recent content in 程序员 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Jul 2016 14:08:33 +0800</lastBuildDate><atom:link href="https://blog.arae.cc/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/index.xml" rel="self" type="application/rss+xml"/><item><title>和程序员打交道的十大禁忌</title><link>https://blog.arae.cc/post/25734.html</link><pubDate>Fri, 15 Jul 2016 14:08:33 +0800</pubDate><guid>https://blog.arae.cc/post/25734.html</guid><description>如果你正在读这篇文章，那么非常有可能是有人发给你了这条链接。这个人可能是你的朋友，同事，亲戚，父母，儿子，兄弟，表亲，姑嫂，外甥，或者恰巧帮你解决了电脑问题的一个人。他通常是程序员，系统管理员，或者 “擅长电脑”名声在外的某个人。 这篇文章的初衷是想要澄清跟程序员打交道的错误方式和禁忌。 不要“一遇到问题就去找程序员” 通常，技术问题通过阅读使用说明就可以解决。比如你刚买了一个新的播放器，想要把它连接到你的电视，你只需要找到使用手册里关于如何连接接口的那一页即可。 错误信息通常会被很清晰地列出来。通过仔细阅读并加以思考这个信息传达了什么来解决这个问题是非常有可能的。例如，如果你看到一条信息“你的硬盘已经快满了”，通常这就意味着你的硬盘要满了。为了安抚你的电脑，你需要删除一些你不再需要的文件（或者将它们转移到外部的移动硬盘中）。 不要认为“程序员对电脑无所不知” 朋友或某个亲戚可能很擅长电脑，但他们并非无所不知。一般他们也完全不知道怎么使用你电脑中出问题的程序，仅仅是使用一些简单的逻辑判断或google搜索来帮你找到解决方案。 实际上，用谷歌搜索已经足够了，因为它会引导你找到相关的论坛或者博客，早在你遇</description></item><item><title>为什么程序员都是夜猫子</title><link>https://blog.arae.cc/post/25732.html</link><pubDate>Fri, 15 Jul 2016 14:02:18 +0800</pubDate><guid>https://blog.arae.cc/post/25732.html</guid><description>一种很流行的说法是，程序员是把咖啡因转化成程序代码的机器。 说的是实情，随便问一个程序员，问他什么时候工作最有状态，估计他很有可能说是深夜。有人稍微早一点，有人更晚。有一种流行的趋势是凌晨4点起床，在破晓之前这段时间里做一些事情。而另一些人喜欢凌晨4点才睡觉。 所有这些的主要目的是躲避打搅。但是你把自己反锁在屋里不就行了？为什么对夜晚情有独钟？ 我想，这事归纳下来有3点：工人的时间表，疲倦的大脑和明亮的电脑屏幕。 工人的时间表 Paul Graham 在2009年写了一篇关于 工人的时间表的文章——主要是说这个世界(主要)存在两种时间表。传统的管理者的时间表——一天的时间别分成了很多小时，一次十分钟的分心至多会浪费你1个小时的时间。 而另一种情况是程序员们所说的工人的时间表——生产东西的人的时间表。研究一个大型的抽象的系统，需要把整件事情装进大脑——这样的一些人类似于用珍贵的水晶玻璃搭建一间房子，一旦有人打搅你，整个结构都会滑落，摔成无数的碎片。 这就是为什么被打扰的程序员会如此的生气。 因为这是一种巨大的精力上的投资，在没有几个小时不被打搅的环境中的酝酿，你不可能开始工作。如果你好不容易在大脑中构建了整个要思考的事情的模</description></item><item><title>程序员的样子</title><link>https://blog.arae.cc/post/25728.html</link><pubDate>Fri, 15 Jul 2016 13:39:24 +0800</pubDate><guid>https://blog.arae.cc/post/25728.html</guid><description>往运行服务器上直接上传文件时程序员的样子 当凌晨3点还在修改bug时程序员的样子 当发现没有按CTRL-S就关闭了文件时程序员的样子 当使用正则表达式返回了想要的结果时程序员的样子 第一次使用CSS美化页面时的效果 当所有人都在办公室挥汗如雨的加班而你却能安然的回家度周末时的样子 当老板想找一个人来修改这个严重bug时程序员的样子 当经过了数小时的努力后第一次运行开发出的脚本时程序员的样子</description></item><item><title>浅谈程序员创业</title><link>https://blog.arae.cc/post/25720.html</link><pubDate>Fri, 15 Jul 2016 13:00:54 +0800</pubDate><guid>https://blog.arae.cc/post/25720.html</guid><description>什么是创业？ 关于“创业”二字有必要重新学习一下，找了两个相对权威定义： 创业就是创业者对自己拥有的资源或通过努力能够拥有的资源进行优化整合，从而创造出更大经济或社会价值的过程。——百度百科 创业是一种思考、推理和行为方式，它为机会所驱动，需要在方法上全盘考虑并拥有和谐的领导能力。创业必须要贡献出时间、付出努力，承担相应的财务的、精神的和社会的风险，并获得金钱的回报、个人的满足和独立自主。——互动百科 两者都给出了明确的创业定义，这里想着重想强调一下创业的目的：物质目的和精神目的，现代社会唯金主义人群不乏少数，提到创业自然而然想到“赚钱”，其实创业的目的不仅是“收入大于成本”，还有精神丰收。按照百度+互动百科的说法，最终极的创业应该是个人物质精神、社会物质精神四丰收。 当然，不是人人创业都追求“四丰收”，完全可以只追求个人金钱丰收，或是追求其中的任何一项或几项，但要注意——千万不要损害未选的，比如为个人赚钱损害社会或他人利益。 怎么才算创业成功？ 创业的成功（这里定义为达到创业初级制定目标）一定是依赖于合理的目标＋个人的努力＋合适的方法＋良好的运气＋主动把握机遇，各个条件没有顺序也没有主次，但这五点</description></item><item><title>程序员接私活的玄机</title><link>https://blog.arae.cc/post/25683.html</link><pubDate>Sat, 25 Jun 2016 17:30:50 +0800</pubDate><guid>https://blog.arae.cc/post/25683.html</guid><description>没错，就是私活，你干过吧，哈，或者，你现在正想靠它赚点零花？别急，这次我们就来聊聊程序员怎样对待私活这个话题，接还是不接，怎么接，看完自有分晓。 很久以前，我曾经接过几次私活（在“千奇百怪的程序员”一文中我列出了全局变量控的一段代码，就是我帮别人干活时碰到的代码），现在不断有人想让我帮他们干点儿私活，但我都拒绝了。 为什么我曾经接私活现在又坚决不沾呢？ 为什么接私活 有人可能说：还不是为了钱嘛！对，钱，钱，钱，这是很多程序员接私活时的主要考虑。但也不全是哦，还有相当一部分人愿意接私活是出于其他原因。 先说说我的三次私活吧。 我曾经教过一个人学习 Qt ，在线的，一对一辅导，帮他熟悉 Qt ，协助他完成一个测试工具的开发。他人在美国，先通过西联汇款给我打了一百多美元，然后我们就开始了……后来呢，因为我总是想按我的方式教他，而他老嫌我让他自己先学习这个学习那个，闹崩了…… 这次经历对我是一次尝试，我当时其实是想了解一对一的在线辅导是否可行，事实证明这里面可能存在很多坑，一是沟通问题，二是教学适配问题，一不注意就会不欢而散。所以，现在这种事情我也不尝试了。我刚在订阅号“程序视界”后台拒绝了一个类似的请求，见下图： 我的</description></item><item><title>软件开发人员的作战手册 - 让程序员活的久一点</title><link>https://blog.arae.cc/post/25686.html</link><pubDate>Sat, 25 Jun 2016 14:36:50 +0800</pubDate><guid>https://blog.arae.cc/post/25686.html</guid><description>1、 程序员的职业准则是：诚实（如实的报告你的状态，风险和出现的问题），守信（承诺完成的任务就要按时完成），尊重（尊重给你的代码提建议的同事，对事不对人）。 2、 写有BUG 的代码和写没有 BUG 的代码花费的时间是一样的。 3、 BUG是会成长的，存活时间越长生命力越顽强。 4、 如果一个笨方法可以解决问题，那它就不是笨方法。 5、 把你的工作分割成小时级的目标任务，你会发现你的工作会轻松很多。 6、 把你要做的工作一条一条的列在纸上，做完一个就打一个勾，你会喜欢打勾的感觉。 7、 不要问客户怎么做，问客户这么做行不行。 8、 让客户给各个功能按优先级排序，也许客户会问“反正所有功能都要完成，为什么还要优先级？”，回答：“如果一个功能做不完要杀头，另一个功能做不完要砍掉胳膊，我还是愿意先做杀头的那个”。 9、 试着跟客户交朋友。 10、 可做可不做的东西都不要做。 11、 业绩考评不一定跟加班时间成正比。 12、 不要提交没有编译过的代码。 13、 不要提交没有测试过的代码。 14、 不要提交没有被REVIEW 的代码。 15、 不要告诉测试人员怎么测试。</description></item></channel></rss>