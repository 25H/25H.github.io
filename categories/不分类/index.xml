<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>不分类 on ARAE</title><link>https://arae.cc/categories/%E4%B8%8D%E5%88%86%E7%B1%BB.html</link><description>Recent content in 不分类 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 20 Aug 2018 21:38:04 +0800</lastBuildDate><atom:link href="https://arae.cc/categories/%E4%B8%8D%E5%88%86%E7%B1%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>20180820-文章删除记录</title><link>https://arae.cc/post/25794.html</link><pubDate>Mon, 20 Aug 2018 21:38:04 +0800</pubDate><guid>https://arae.cc/post/25794.html</guid><description>共计110项 已删除文章列表 200行JS代码实现超级简单的区块链 8行代码在Python3中实现多核并行执行 API - SendMessageA简单示例运用 API 拦截窗口关闭&amp;amp;最大化&amp;amp;最小化消息 Crazy Kids Delphi7简单DirectUI界面源码 E language is what？ EDB易数据库查看器 Faded (Conor Maynard Cover) H5 video 视频标签属性详解 HashMap —— 高效随机存取数据结构 ,文本索引必备 Hello Venus - 我是艺术(I&#39;m Ill) hook禁止外部程序创建新窗口[易语言源码] MDI窗口支持库源码，支持静态编译嗷 PHP导出Excel、CSV文件，并解决显示不正常等问题 p站找的几张图 Win10提示威胁服务已经停止,立即重启的解决方法 Windows10关闭80端口占用 [教程]防止模块被反编译的有效方法（吴总提供）： [转]易语言 360免杀方法心得总结 “大牛”不可缺少的三种文献精读思维模式 《ありがとう》中文名《感谢》 【WebKit内核】EasyCKL开源浏览器库 6.1 支持调试运行了 一分钟明白 VS manifest 原理 不懂技术的人不要对懂技术的人说这很容易实现 为什么“程序猿”常有而“程序媛”不常有？ 为什么我们不要 .NET 程序员 为什么程序员都是夜猫子 为什么谷歌要执行严格的代码编写规范 为啥这么多</description></item><item><title>HEXO.NexT 表情测试 - b1</title><link>https://arae.cc/post/25778.html</link><pubDate>Wed, 07 Mar 2018 18:55:41 +0800</pubDate><guid>https://arae.cc/post/25778.html</guid><description>这破东西之前弄过两三次，每次都比这个好@pp{阴险}，最后忘记啥毛病都删了。。 调用代码大概就是@pp/{滑稽}(就当/不存在)中间那个pp方便以后添加其他表情，虽说有个别地方写死了@pp{你懂的}。。 @pp{滑稽}@pp{滑稽}@pp{滑稽}这个魔性的表情我都眼馋很久了@pp{滑稽}@pp{滑稽}@pp{滑稽} @pp{呵呵}@pp{哈哈}@pp{吐舌}@pp{太开心}@pp{笑眼}@pp{花心}@pp{小乖}@pp{乖}@pp{捂嘴笑}@pp{滑稽}@pp{你懂的}@pp{不高兴}@pp{怒}@pp{汗}@pp{黑线}@pp{泪}@pp{真棒}@pp{喷}@pp{惊哭}@pp{阴险}@pp{鄙视}@pp{酷}@pp{啊}@pp{狂汗}@pp{what}@pp{疑问}@pp{酸爽}@pp{呀咩爹}@pp{委屈}@pp{惊讶}@pp{睡觉}@pp{笑尿}@pp{挖鼻}@pp{吐}@pp{犀利}@pp{小红脸}@pp{懒得理}@pp{勉强}@pp{爱心}@pp{心碎}@pp{玫瑰}@pp{礼物}@pp{彩虹}@pp{太阳}@pp{星星月亮}@pp{钱币}@pp{茶杯}@pp{蛋糕}@pp{大</description></item><item><title>注释用的好，可能会挨打！？</title><link>https://arae.cc/post/25773.html</link><pubDate>Fri, 23 Feb 2018 17:19:04 +0800</pubDate><guid>https://arae.cc/post/25773.html</guid><description>一、概述 这是写在前面的话：在开发中的时候，应该、可能、或许会看到有趣的注释 遇到类似的注释能让开发更加的有乐趣，我提倡程序猿继续传承下去这个美好优良传统 二、正文 比如： /** * 描述：XXXX &amp;lt;br&amp;gt; * 作者： XXXX &amp;lt;br&amp;gt; * E-mail: XXXX &amp;lt;br&amp;gt; * 日期： XXXX 下午XXXX &amp;lt;br&amp;gt; */ public class Points implements Serializable { private static final long serialVersionUID = 1L; /** ************************************************************** * * * .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-. * * | ______ | * * | .-&amp;quot; &amp;quot;-. | * * | / \ | * * | _ | | _ | * * | ( \ |, .-. .-. ,| / ) | * * | &amp;gt; &amp;quot;=._ | )(__/ \__)( | _.=&amp;quot; &amp;lt; | * * | (_/&amp;quot;=._&amp;quot;=._ |/ /\ \| _.=&amp;quot;_.=&amp;quot;\_) | * * | &amp;quot;=._&amp;quot;(_ ^^ _)&amp;quot;_.=&amp;quot; | * * | &amp;quot;=\__|IIIIII|__/=&amp;quot; | * * | _.=&amp;quot;| \IIIIII/ |&amp;quot;=._ | * * | _ _.=&amp;quot;_.=&amp;quot;\ /&amp;quot;=._&amp;quot;=._ _ | * * | ( \_.=&amp;quot;_.=&amp;quot; `--------` &amp;quot;=._&amp;quot;=._/ ) | * * | &amp;gt; _.=&amp;quot; &amp;quot;=._ &amp;lt; | * * | (_/ \_) | * * | | * * &#39;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#39; * * * * LASCIATE OGNI SPERANZA, VOI CH&#39;ENTRATE * ************************************************************** */ /** * 请不要尝试修改属性lng和lat为别的数据类型，相信我，改了之后，你会后悔的。 * 至于原因，创建的时候我应该知道，现在只剩下上帝知道 */ private Integer id; private String markerId; // 标识符 private double lng; private double lat; private String type; private Integer status = 0; // 覆盖物状态：0未添加，1已添加，2已添加并且是已发送的覆盖物 默认值：0 private List&amp;lt;Points&amp;gt; list = new ArrayList&amp;lt;Points&amp;gt;(); ...... 再或者在结尾处加 /* * ┏┓ ┏┓ *┏┛┻━━━┛┻┓ *┃ ┃ *┃ ━ ┃ *┃ ┳┛ ┗┳ ┃ *┃ ┃ *┃ ┻ ┃ *┃ ┃ *┗━┓ ┏━┛ * ┃ ┃神兽保佑 * ┃ ┃代码无BUG！ * ┃ ┗━━━┓ * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ * ┃┫┫ ┃┫┫</description></item><item><title>API中数据结构大小计算法</title><link>https://arae.cc/post/25755.html</link><pubDate>Sun, 23 Oct 2016 12:40:20 +0800</pubDate><guid>https://arae.cc/post/25755.html</guid><description>我们在调用系统API函数的时候，经常会碰到一个问题，许多的API第一个参数都是结构尺寸（dwSize） 其他语言里有直接取数据结构尺寸大小的命令，但是易语言中没有，可能很多刚接触的易友当时一定很苦恼这个结构到底多大。 其实要计算结构尺寸很简单，首先了解下易语言中的各种数据类型。 易语言中分基本数据类型，复合数据类型两种。 不过我更喜欢把它分为固定长度类型和可变长度类型。 固定长度类型包括： 字节型，短整数型，整数型，长整数型，小数型，双精度小数型 逻辑型，日期时间型，子程序指针型。 可变长度类型包括： 文本型，字节集型，数组型，支持库自定义数据类型，用户自定义数据类型 固定长度类型就是他在程序中占用的内存字节数是固定的，而可变长度的则不固定，比如文本型，文本增加，内存占用就增加，减少就相应减少等等。而支持库提供的其他数据类型和用户自定义数据类型，也是有可能变大或者变小的，这些不能确定长度的就叫做可变长度类型了。 固定长度类型的可以直接代入计算： 字节型：1 字节 短整数型：2字节 整数型：4字节 长整数型：8字节 小数型：4字节 双精度小数型：8字节 逻辑型：4字节 日期时间型：8字节 子程序指针型：4字节 而对于可变长度的：文</description></item><item><title>微信小程序服务器端用什么语言开发？</title><link>https://arae.cc/post/25750.html</link><pubDate>Thu, 29 Sep 2016 15:41:49 +0800</pubDate><guid>https://arae.cc/post/25750.html</guid><description>微信小程序服务器端用什么语言开发？ 首先，比如微信二次开发，可以用java或者php 来做服务器端语言来进行二次开发，那小程序呢？文档写着.js负责业务逻辑，难道服务器端就是纯JS实现？ 包括对数据库的操作吗？ 还是也可以用php？ 其实文档中在request里面可以填写自己的网站地址，那么应该就可以从自己的服务器获取到数据，所以后端什么数据语言都可以。 那这样的话是不是跟ajax差不多啊， 后台PHP处理好后反馈给前端数据又怎么返回？ 服务端语言和前端逻辑没啥关系吧，php，python都行。但是最好用 python，快速开发！php 开发后端会遇到很多问题的。 wx.request发起的是https请求。一个微信小程序，同时只能有5个网络请求连接。</description></item><item><title>一门编程语言的诞生总是有理由的</title><link>https://arae.cc/post/25749.html</link><pubDate>Thu, 29 Sep 2016 15:35:39 +0800</pubDate><guid>https://arae.cc/post/25749.html</guid><description>Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many, and how well, languages can be described this way. Algol: Assembly language is too low-level. Pascal: Algol doesn&amp;rsquo;t have enough data types. Modula: Pascal is too wimpy for systems programming. Simula: Algol isn&amp;rsquo;t good enough at simulations. Smalltalk: Not everything in Simula is an object. Fortran: Assembly language is too low-level. Cobol: Fortran is scary. PL/1: Fortran doesn&amp;rsquo;t have enough data types. Ada: Every existing language is missing something. Basic: Fortran is scary. APL: Fortran isn&amp;rsquo;t good enough at manipulating arrays. J: APL requires its own character set. C: Assemby language is too low-level. C++: C is too low-level. Java: C++ is a kludge. And Microsoft is going to crush us. C#: Java is controlled by Sun. Lisp: Turing Machines are an awkward way to describe computation. Scheme: MacLisp is a kludge. T: Scheme has no libraries. Common Lisp: There are too many dialects of Lisp. Dylan: Scheme has no libraries, and Lisp syntax is scary. Perl: Shell scripts/awk/sed are not enough like programming languages. Python: Perl is a kludge. Ruby: Perl is a kludge, and Lisp syntax is scary. Prolog: Programming is not enough like logic. 易语言: 以上所有语言都是英文编程，没有中文编程简单易懂。</description></item><item><title>EIDEA介绍</title><link>https://arae.cc/post/25745.html</link><pubDate>Wed, 14 Sep 2016 11:14:28 +0800</pubDate><guid>https://arae.cc/post/25745.html</guid><description>支持库命令查找 支持直接搜索所有已加载的支持库命令 找到后自动定位 自动引用模块 双击快速引用常用模块 自动加载模块 可以添加你想自动加载的模块到自动加载分类上，当易语言启动时，就自动加载到易语言里。(目前只支持双击易语言主程序新建空程序时才能自动加载) 自定义添加分类功能，程序初始化时自动为你添加了“常用模块”分类 可以添加你经常使用的模块，方便随时加载到易语言，而不用到时找，浪费不必要的时间。 常用便签 看其名知其意，可添加你常用工具软件、易源码、目录。 支持无限分类。 自动备份 可自定义设置多长时间自动备份1次源码。 可指定自动备份的目录路径。 可设置备份时的文件名格式，最大备份的数量。 触发备份：源码的源文件有变动。（自动备份的原理，每次达到指定时间触发备份时，会先去读取你已保存源码的MD5，和最后一次备份的源码MD5进行对比是否一致，如果不一致则备份） 为什么没开了自动备份，但是不起效？ 原因：源码未自动保存。 解决办法，可以开启自动保存功能，或者手动Ctrl+S进行保存，只有源码的源文件变了，才会触发备份。 自动保存 可自定义设置多长时间自动保存一次源码，防止源码因停电或其它原因丢失，造成不可挽回的结果。 模块查看器</description></item><item><title>EIDE助手-更新日志</title><link>https://arae.cc/post/25763.html</link><pubDate>Fri, 29 Jul 2016 23:08:33 +0800</pubDate><guid>https://arae.cc/post/25763.html</guid><description>3.0 [未发布] 点击转到3x页面 上次修改时间：2018-7-27 00:30:37 2.9 调整 &amp;lsquo;状态夹-&amp;gt;Tools&amp;rsquo; 界面样式 增加 &amp;lsquo;状态夹-&amp;gt;Tools&amp;rsquo; 前景色设置项 修复 &amp;lsquo;状态夹-&amp;gt;Tools&amp;rsquo; 点击后无法跳出循环体 优化多进程通讯消息分发机制 优化SET.EXE设置程序，增加&amp;rsquo;关于&amp;rsquo;页面 修复 &amp;lsquo;智能编译&amp;rsquo; 一处逻辑错误导致无法编译/多次编译问题 修复 &amp;lsquo;F1键展开当前命令参数表&amp;rsquo; 部分情况下失效 SET.EXE设置程序，增加&amp;rsquo;删除无效配置文件&amp;rsquo;，位于 支持库设置-&amp;gt;危险区 工具箱 -&amp;gt; 屏幕取色，增加单击视图区恢复调色板功能 修复 &amp;lsquo;优化配色方案&amp;rsquo; 修改配色失败 修复 &amp;lsquo;模块管理&amp;rsquo; 在特定布局下无法获取句柄 修复 &amp;lsquo;屏蔽修复优化-&amp;gt;自动切换工作夹&amp;rsquo; 失焦BUG 发布时间：2018-7-28 2.8 重写工具箱 -&amp;gt; POST测试 优化工具箱 -&amp;gt; 编码转换 修复模块管理 在特殊情况下出现错位问题 优化工具箱 -&amp;gt; NASM 配色方案</description></item><item><title>程序猿专用代码注释:佛祖保佑，永无BUG</title><link>https://arae.cc/post/25736.html</link><pubDate>Wed, 20 Jul 2016 02:17:56 +0800</pubDate><guid>https://arae.cc/post/25736.html</guid><description>逛论坛发现这个,实在是高上大啊 // _ooOoo_ // o8888888o // 88&amp;quot; . &amp;quot;88 // (| -_- |) // O\ = /O // ____/`---&#39;\____ // . &#39; \\| |// `. // / \\||| : |||// \ // / _||||| -:- |||||- \ // | | \\\ - /// | | // | \_| &#39;&#39;\---/&#39;&#39; | | // \ .-\__ `-` ___/-. / // ___`. .&#39; /--.--\ `. . __ // .&amp;quot;&amp;quot; &#39;&amp;lt; `.___\_&amp;lt;|&amp;gt;_/___.&#39; &amp;gt;&#39;&amp;quot;&amp;quot;. // | | : `- \`.;`\ _ /`;.`/ - ` : | | // \ \ `-. \_ __\ /__ _/ .-` / / // ======`-.____`-.___\_____/___.-`____.-&#39;====== // `=---=&#39; // // ............................................. // 佛祖保佑 永无BUG // 佛曰: // 写字楼里写字间，写字间里程序员； // 程序人员写程序，又拿程序换酒钱。 // 酒醒只在网上坐，酒醉还来网下眠； // 酒醉酒醒日复日，网上网下年复年。 // 但愿老死电脑间，不愿鞠躬老板前； // 奔驰宝马贵者趣，公交自行程序员。 // 别人笑我忒疯癫，我笑自己命太贱； // 不见满街漂亮妹，哪个归得程序员？</description></item><item><title>微软修复已存在19年的漏洞</title><link>https://arae.cc/post/25735.html</link><pubDate>Fri, 15 Jul 2016 14:30:31 +0800</pubDate><guid>https://arae.cc/post/25735.html</guid><description>微软发布补丁包修补漏洞，而据研究人员指出，微软修补的一个漏洞（BUG），在Windows95时代就已经存在，这个漏洞在黑市上价值几十万美元。 微软当然不会公开所修补的漏洞从何时存在于系统。 据美国华盛顿邮报网站报道，IBM公司X-Force部门的研究人员弗雷曼（RobertFreeman）进行了爆料。据称，微软本周二修补的一个漏洞中，包括一个存在了至少19年的漏洞，可以让黑客远程操控电脑，十分危险。 据称，这一漏洞在Windows95的第一版中就已存在，不过目前还没有证据证明黑客曾经利用过这个漏洞。 众所周知，有关攻击程序、软件漏洞等存在一个巨大的网络黑市，不良之徒和黑客组织相互交易。弗雷曼透露，这个存在了19年的漏洞，在黑市上价值六位数（几十万美元）。 华盛顿邮报指出，这一案例，也证明修补软件漏洞是一个极富挑战性的工作，即使是微软这样的公司，在严格审查之下，仍然会让漏洞漏网。 实际上，长寿的软件“BUG”不算新鲜事。 2010年，谷歌(微博)的一位工程师发现了一个“17岁”的Windows系统漏洞，存在于32位版系统中，可被黑客用来劫持电脑控制权。 今年九月份，在一个免费的工具软件中，研究人员发现了</description></item><item><title>10个最“优秀”的代码注释</title><link>https://arae.cc/post/25729.html</link><pubDate>Fri, 15 Jul 2016 13:48:46 +0800</pubDate><guid>https://arae.cc/post/25729.html</guid><description>下面是stackoverflow网站上网友针对你看到过的最好的代码注释是什么样的？这个问题给出的回答的前10条： // 亲爱的维护者： // 如果你尝试了对这段程序进行‘优化’， // 并认识到这种企图是大错特错，请增加 // 下面这个计数器的个数，用来对后来人进行警告： // 浪费在这里的总时间 = 39h /** * 致终于来到这里的勇敢的人： 你是被上帝选中的人，英勇的、不辞劳苦的、不眠不修的来修改 我们这最棘手的代码的编程骑士。你，我们的救世主，人中之龙， 我要对你说：永远不要放弃，永远不要对自己失望，永远不要逃走，辜负了自己。 永远不要哭啼，永远不要说再见。永远不要说谎来伤害自己。 */ Exception up = new Exception(&amp;quot;Something is really wrong.&amp;quot;); throw up; // 一些修改1 - 2002/6/7 增加临时的跟踪登录界面 // 一些修改2 - 2007/5/22 我临时的犯傻 #define TRUE FALSE //逗一逗调试程序的傻瓜们 if (/*you*/ $_GET[&#39;action&#39;]) { //celebrate(恭喜) // 如果这段代码好用，那它是Paul DiLascia写的。 //如果不好用，我不知道是谁写的。 //写这段代码的时候，只有上帝和我知道它是干嘛的 //现在，只有上帝知道 // 晕了，以后再修改 // 神奇。勿动。 你有没有更绝的？</description></item><item><title>如何编写高质量的易语言代码？</title><link>https://arae.cc/post/25654.html</link><pubDate>Sat, 25 Jun 2016 14:37:51 +0800</pubDate><guid>https://arae.cc/post/25654.html</guid><description>什么是一个高效的软件？一个高效的软件不仅应该比实现同样功能的软件运行得更快，还应该消耗更少的系统资源。程序的时间效率是指运行速度，空间效率是指程序占用内存或者外存的状况。另外程序的效率我们也可以分为全局效率和局部效率。全局效率是指站在整个系统的角度上考虑的效率，局部效率是指站在模块或函数角度上考虑的效率。 使用整数和长整数 提高代码运行速度最简单的方法莫过于使用正确的数据类型了。也许你不相信，但是 正确地选择数据类型可以大幅度提升代码的性能。在大多数情况下，程序员可以将短整数型、小数型和双精度小数型的变量替换为整数（Integer）或长整数（Long）类型的变量，因为易语言处理整数和长整数的能力远远高于处理其它几种数据类型。 在大多数情况下，程序员选择使用小数型或双精度小数型的原因是因为它们能够保存小数。但是小数也可以保存在整数类型的变量中。例如程序中约定有三位小数，那么只需要将保存在整数型变量中的数值除以1000就可以得到结果。根据我的经验，使用整数和长整数替代短整数型、小数型和双精度小数型后，代码的运行速度可以提高将近10倍。 但是我们也不要老是强调使用使用整数和长整数，因为在程序中数据类型</description></item><item><title>软件开发人员的作战手册 - 让程序员活的久一点</title><link>https://arae.cc/post/25686.html</link><pubDate>Sat, 25 Jun 2016 14:36:50 +0800</pubDate><guid>https://arae.cc/post/25686.html</guid><description>1、 程序员的职业准则是：诚实（如实的报告你的状态，风险和出现的问题），守信（承诺完成的任务就要按时完成），尊重（尊重给你的代码提建议的同事，对事不对人）。 2、 写有BUG 的代码和写没有 BUG 的代码花费的时间是一样的。 3、 BUG是会成长的，存活时间越长生命力越顽强。 4、 如果一个笨方法可以解决问题，那它就不是笨方法。 5、 把你的工作分割成小时级的目标任务，你会发现你的工作会轻松很多。 6、 把你要做的工作一条一条的列在纸上，做完一个就打一个勾，你会喜欢打勾的感觉。 7、 不要问客户怎么做，问客户这么做行不行。 8、 让客户给各个功能按优先级排序，也许客户会问“反正所有功能都要完成，为什么还要优先级？”，回答：“如果一个功能做不完要杀头，另一个功能做不完要砍掉胳膊，我还是愿意先做杀头的那个”。 9、 试着跟客户交朋友。 10、 可做可不做的东西都不要做。 11、 业绩考评不一定跟加班时间成正比。 12、 不要提交没有编译过的代码。 13、 不要提交没有测试过的代码。 14、 不要提交没有被REVIEW 的代码。 15、 不要告诉测试人员怎么测试。</description></item><item><title>Zend Studio 13.0(PHP集成开发环境)</title><link>https://arae.cc/post/25647.html</link><pubDate>Sat, 25 Jun 2016 14:34:51 +0800</pubDate><guid>https://arae.cc/post/25647.html</guid><description>特点 1.快速代码开发与配置本地和远程调试器； 2.数据库连通性 &amp;amp; SQL工具 团队合作环境； 3.完全 PHP 4/PHP 5 切换 PHPDocs/PHP文档处理程序支持SFTP, FTP以至SSH的安全连接 100个以上代码摘录； 4.50个以上样品数据库应用程序 与Zend Platform组合。[1] Zend Studio是当今最伟大的PHP集成开发环境 Zend Studio包括了PHP开发所有必须的部件，通过一整套编辑、调试、分析、优化和数据库工具，使用Zend Studio 缩短了开发周期，并简化了复杂的应用方案，毋庸置疑，其已经是当今世上最强大的PHP集成开发环境。 Zend Studio的强大之处，除了一般编辑器所具有的代码高亮，语法自动缩进，书签功能外，它内置的调试器更是无可挑剔，支持本地和远程（debug server）两种调试模式，支持诸如跟踪变量、单步运行、断点、堆栈信息、函数调用、查看实时输出等多种高级调试功能。另外，最新版（Zend Studio 10.01）对中文的支持也是非常稳定的。 主要组件 专业的集成开发环境内置编辑器, 调试器, 以及帮助文档 Windows, Linux, Mac 等多个操作系统版本 多语言支持 专业的编辑器 关键字、语法加亮显示 (PHP, HTML, XHTML, and Javascript) XML&amp;amp; CSS的关键字、语法加亮显示 代码</description></item></channel></rss>