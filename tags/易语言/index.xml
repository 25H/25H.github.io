<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>易语言 on ARAE</title><link>https://arae.cc/tags/%E6%98%93%E8%AF%AD%E8%A8%80.html</link><description>Recent content in 易语言 on ARAE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 01 Jan 2019 12:00:00 +0800</lastBuildDate><atom:link href="https://arae.cc/tags/%E6%98%93%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>AMZ 扩展插件管理平台</title><link>https://arae.cc/post/25800.html</link><pubDate>Tue, 01 Jan 2019 12:00:00 +0800</pubDate><guid>https://arae.cc/post/25800.html</guid><description>支持库介绍 一个基于 易语言 深度定制开发的扩展插件管理平台 相关截图 最新版本界面可能与截图有出入。 Win10显示效果更佳 更新说明 [点击进入查看](/post/25763.html) -- 安装/使用 将“AMZ”、“lib”两个目录复制到易语言根目录下 打开易语言 菜单-&amp;gt;工具-&amp;gt;支持库配置 选择“. AMZ ”支持库 打开易语言 菜单-&amp;gt;工具-&amp;gt;AMZ Settings 勾选将使用的插件 重启易语言 更新方法 到官方Q群文件内下载最新版本助手安装/更新包 删除更新包 AMZ\Config.ini 文件， 如修改过&amp;rsquo;自定义命令名&amp;rsquo;插件配置文件，删除更新包 \AMZ\plugin\mz.r1.cc\Config.ini 文件 将 AMZ、lib目录覆盖到易语言根目录即可， 插件使用方法 打开易语言 菜单-&amp;gt;工具-&amp;gt;AMZ Settings 勾选要使用的插件后重启易语言 插件设置根据设置页面提示是否要重启易语言 注：AMZ(包括内置插件)基于官方原版开发，第三方修改版可能无法正常运行。 插件开发 点击进入查看 插件冲突说明 有的易友加载[AMZ]后，发现易语言关闭不了、关闭会崩溃、或其它的一些问题，这些可能是跟其它的支持库起冲突了，目前发现跟有[ET]支持库有冲突。 确定是否是支持库冲突造成的流程：按住Shift键，然后双</description></item><item><title>易语言-&gt;编程基础知识-&gt;数据类型</title><link>https://arae.cc/post/25761.html</link><pubDate>Wed, 20 Sep 2017 18:59:29 +0800</pubDate><guid>https://arae.cc/post/25761.html</guid><description>数据类型： 各种数值的数据都在内存中占用一定的存储空间。字节（byte) 是系统中最基本存储单位。数据类型所占字节数越多，所能够容纳数值的范围就越大。 数据类型的概念： 数据：是指能够输入到计算机中，并能够被计算机识别和加工处理的符号的集合，是程序处理的最小对象。例如：数值、字符、图形、图像和声音等都是数据。数据在程序中以常量或变量的方式被引用，不同的数据特点有不同的存储要求和处理算法。 上小学时，我们学过自然数，小数，分数等，其中，1,2,3这样的数叫自然数；-2，-1，0，1，2等的数叫整数；1.1，1.3，1.4，1.66这样的数叫小数。把数据进行这样的区分，在电脑语言里被称做数据类型。 易语言的数据类型从数据结构来区分，可分为基本数据类型、特殊数据类型。 基本数据类型有6种，包括数值型、逻辑型、日期时间型、文本型、字节集型、子程序指针型。 数值型数据又包括了字节型、短整数型、整数型、长整数型、小数型、双精度小数型。数值型数据都是由0-9数字，小数点组成的一个数值。 常用数据类型： 数据类型名称 占用字节 取值范围 字节型 1 0 ～ 255 短整数型 2 -32,768 ～ 32,767 整数型 4 -2,147,483,648 ～ 2,147,483,647 长整数型 8 -9,223,372,036,854,775,808 ～ 9,223,372,036,854,775,807 小数型 4 -3.4E38 ～ 3.4E38 (7位小数) 双精</description></item><item><title>易语言自定义命令（自定义核心支持库命令名）</title><link>https://arae.cc/post/25757.html</link><pubDate>Sun, 13 Nov 2016 19:26:58 +0800</pubDate><guid>https://arae.cc/post/25757.html</guid><description>此插件为Eapp平台专用插件，平台下载地址：572521856 (QQ群文件)</description></item><item><title>执行命令行说明</title><link>https://arae.cc/post/25756.html</link><pubDate>Tue, 08 Nov 2016 08:35:02 +0800</pubDate><guid>https://arae.cc/post/25756.html</guid><description>{p} = 相对于易语言根目录\AM\Cmd\，注意：后面带有 {f} = 当前编译出去的程序文件全路径 {hide} = 隐藏执行命令行执行的窗口，此标记必须放到第一行。 // = 屏蔽当前行的命令行，屏蔽后将不再执行此命令行。 命令例子： {hide} {p}upx.exe -1 {f} 命令例子说明： 1.隐藏执行窗口 2.执行upx压缩；-1为upx命令；{f}为编译文件路径。</description></item><item><title>API中数据结构大小计算法</title><link>https://arae.cc/post/25755.html</link><pubDate>Sun, 23 Oct 2016 12:40:20 +0800</pubDate><guid>https://arae.cc/post/25755.html</guid><description>我们在调用系统API函数的时候，经常会碰到一个问题，许多的API第一个参数都是结构尺寸（dwSize） 其他语言里有直接取数据结构尺寸大小的命令，但是易语言中没有，可能很多刚接触的易友当时一定很苦恼这个结构到底多大。 其实要计算结构尺寸很简单，首先了解下易语言中的各种数据类型。 易语言中分基本数据类型，复合数据类型两种。 不过我更喜欢把它分为固定长度类型和可变长度类型。 固定长度类型包括： 字节型，短整数型，整数型，长整数型，小数型，双精度小数型 逻辑型，日期时间型，子程序指针型。 可变长度类型包括： 文本型，字节集型，数组型，支持库自定义数据类型，用户自定义数据类型 固定长度类型就是他在程序中占用的内存字节数是固定的，而可变长度的则不固定，比如文本型，文本增加，内存占用就增加，减少就相应减少等等。而支持库提供的其他数据类型和用户自定义数据类型，也是有可能变大或者变小的，这些不能确定长度的就叫做可变长度类型了。 固定长度类型的可以直接代入计算： 字节型：1 字节 短整数型：2字节 整数型：4字节 长整数型：8字节 小数型：4字节 双精度小数型：8字节 逻辑型：4字节 日期时间型：8字节 子程序指针型：4字节 而对于可变长度的：文</description></item><item><title>易语言 取自定义数据类型的大小</title><link>https://arae.cc/post/25744.html</link><pubDate>Sat, 10 Sep 2016 01:37:11 +0800</pubDate><guid>https://arae.cc/post/25744.html</guid><description>先说一下易语言的变量储存机制 易语言有基本数据类型和复合数据类型两种 基本数据类型包括：1. 各种整数 2.各种浮点 3. 逻辑值 他们都是储存在栈上的 大小都是固定的 用不着取 复合类型一般储存在堆上 然后在栈上储存堆上数据的引用 其中有几种比较特殊：字符串 字节集 数组 这两种类型的大小虽然储存在堆上的某个地方 但都有专门的取大小函数 直接调用即可 剩下就是自定义数据类型 比如类或者结构 特别是类 类的数据成员都是私有的 假如你想知道别人写的一个模块里一个类的大小 不可能通过数数据成员的方法得到 那如何取到呢？有人可能提出用“取变量地址”这个函数 可惜的是 “取变量地址”取到的永远是栈上的地址 根据上面所说 栈上地址的内容就是堆上地址 但是易语言没有一个用指针取整数的函数 这就需要用一个系统api：RtlMoveMemory 这个函数跟c语言memcpy的功能一样 但是有了他问题就变得容易的多 声明一个整形变量a q是一个自定义的类或者结构 RtlMoveMemory (取变量地址 (a), 取变量地址 (q), 4) 这样a储存的就是ls在堆区的地址 之后用到一个api：LocalSize 我们都知道堆区内存分配必然用到LocalAlloc/GlobalAlloc 那么也能通过LocalSize取到大小 调</description></item><item><title>EIDE助手（易语言支持库）</title><link>https://arae.cc/post/25762.html</link><pubDate>Fri, 29 Jul 2016 11:56:20 +0800</pubDate><guid>https://arae.cc/post/25762.html</guid><description>支持库介绍 EIDE支持库是一款基于易语言IDE开发的编程工具，提供了很多易语言便携功能。新版本EIDE插件支持库更名为APP助手。自带多种插件，如编程工具，快速引用模块，屏蔽相关信息，智能编译，智能语法等等。 独创插件加载继续，10+插件完美秒开 注：EIDE助手只是辅助支持库，不会增加任何代码编译到你的程序里面 相关截图 最新版本界面可能与截图有出入。 Win10显示效果更佳 更新说明 点击进入查看 安装/使用 将“AM”、“lib”两个目录复制到易语言根目录下 打开易语言 菜单-&amp;gt;工具-&amp;gt;支持库配置 选择“. APP ”支持库 打开易语言 菜单-&amp;gt;工具-&amp;gt;APP管理 勾选将使用的插件 重启易语言 助手更新方法 到官方Q群文件内下载最新版本助手安装/更新包 删除更新包 AM\AppConfig.ini 文件， 如修改过&amp;rsquo;自定义命令名&amp;rsquo;插件配置文件，删除更新包 AM\APP\CC_idy\Config.ini 文件 将 AM、lib目录覆盖到易语言根目录即可， 助手插件使用方法 打开易语言 菜单-&amp;gt;工具-&amp;gt;APP管理 勾选要使用的插件后重启易语言 插件设置根据设置页面提示是否要重启易语言 注：APP平台(包括内置插件)基于官方原版开发，第三方修改版可能无法正常运行。 助手插</description></item><item><title>时钟事件执行时间超出时钟周期问题解释</title><link>https://arae.cc/post/25737.html</link><pubDate>Thu, 21 Jul 2016 14:13:58 +0800</pubDate><guid>https://arae.cc/post/25737.html</guid><description>时钟组件 作为定时器 系统会在设定时间发送 WM_TIMER 消息给消息队列，因为事件处理函数和窗口回调函数都是同线程， 在一个消息未处理完返回之前是不能处理其他事件消息的，也就是一个时钟事件函数未执行完返回之前，系统是不会发送下一个 WM_TIMER 消息到消息队列中的，所以第二个WM_TIMER消息也就是会被忽略掉。 将时钟周期设置为500 1.下面这个例子你会发现 a 和b是同步的数值是相等的就是这个道理 .局部变量 a, 整数型, 静态 .局部变量 b, 整数型, 静态 a ＝ a ＋ 1 调试输出 (“a”, a) 延时 (1000) b ＝ b ＋ 1 调试输出 (“b”, b) 2.第二个例子很有意思，你会发现程序一直在输出a ，而没有输出b，呵呵，你来猜猜是什么原因？ .局部变量 a, 整数型, 静态 .局部变量 b, 整数型, 静态 a ＝ a ＋ 1 调试输出 (“a”, a) 延迟 (1000) b ＝ b ＋ 1 调试输出 (“b”, b) 第二个例子 和第一个例子的区别是把延时（）换成了延迟（），想来看看这两个命令的作用和区别，他们的区别一个是相当于暂停当前线程向下执行，等待设定长时间后在向下执行，但并不处理事件消息； 另一个是在等待中并且处理事件消息。那么为什么会出现这样的结果呢，首先来看一下延迟（）命令 他是在等待中处理消息队列中未决的消息，那么WM_T</description></item><item><title>禁止WebBrowser网页跳转时发出的声音</title><link>https://arae.cc/post/25721.html</link><pubDate>Fri, 15 Jul 2016 13:04:52 +0800</pubDate><guid>https://arae.cc/post/25721.html</guid><description>默认情况下，IE内核的网页浏览框(WebBrowser、CHtmlView、CHtmlDialog等控件)在跳转网页、点击按钮时会发出声音，用CoInternetSetFeatureEnabled这个API可以禁止掉。 易语言代码： .版本 2 .子程序 禁止网页跳转声音 CoInternetSetFeatureEnabled (#FEATURE_DISABLE_NAVIGATION_SOUNDS, #SET_FEATURE_ON_PROCESS, 1) .DLL命令 CoInternetSetFeatureEnabled, 整数型, &amp;quot;urlmon&amp;quot;, &amp;quot;CoInternetSetFeatureEnabled&amp;quot; .参数 FeatureEntry, 整数型, , INTERNETFEATURELIST .参数 dwFlags, 整数型, , DWORD .参数 fEnable, 整数型, , BOOL .常量 FEATURE_DISABLE_NAVIGATION_SOUNDS, &amp;quot;21&amp;quot;, , 禁止跳转声音 .常量 SET_FEATURE_ON_PROCESS, &amp;quot;2&amp;quot;, , 仅对当前进程有效 VC/C++代码： #include &amp;lt;urlmon.h&amp;gt; #ifndef FEATURE_DISABLE_NAVIGATION_SOUNDS #define FEATURE_DISABLE_NAVIGATION_SOUNDS 21 #endif #ifndef SET_FEATURE_ON_PROCESS #define SET_FEATURE_ON_PROCESS 0x00000002 #endif void DisableClickSounds() { CoInternetSetFeatureEnabled((INTERNETFEATURELIST)FEATURE_DISABLE_NAVIGATION_SOUNDS,SET_FEATURE_ON_PROCESS,true); } C#代码： const int FEATURE_DISABLE_NAVIGATION_SOUNDS = 21; const int SET_FEATURE_ON_PROCESS = 0x00000002; [DllImport(&amp;quot;urlmon.dll&amp;quot;)] [PreserveSig] [return: MarshalAs(UnmanagedType.Error)] static extern int CoInternetSetFeatureEnabled( int FeatureEntry, [MarshalAs(UnmanagedType.U4)] int dwFlags, bool fEnable); static void DisableClickSounds() { CoInternetSetFeatureEnabled( FEATURE_DISABLE_NAVIGATION_SOUNDS, SET_FEATURE_ON_PROCESS, true); }</description></item><item><title>易语言静态编译链接器大全(为EIDE助手准备滴)</title><link>https://arae.cc/post/25677.html</link><pubDate>Sat, 25 Jun 2016 14:44:50 +0800</pubDate><guid>https://arae.cc/post/25677.html</guid><description>本文中的各个链接器收集于网络，汇总在一起，方便广大易友下载使用； 易语言的大部分支持库是 使用 vc6 编译， 所以， 推荐大家使用 vc6的链接器； 如果使用 其他链接库编译出现问题，或 编译出来的程序 运行存在问题，请试试更换 成 vc6 的链接器再次编译测试； 注意，其他链接器需要安装运行库才能运行，有打包一些，在对应的链接器里面 链接器名称说明： VC6核心库都是使用这个编译， 大部分库也是，推荐使用； VC7暂无说明，自行选择判断测试 VC8暂无说明，自行选择判断测试 VC9暂无说明，自行选择判断测试，带运行库 VC2010暂无说明，自行选择判断测试 VC2012暂无说明，自行选择判断测试 VC2013暂无说明，自行选择判断测试 VC2015_gatepase版本款链接器比较挑，开发端电脑必须是 Windows 7 SP1 或以上同时必须安装 VC2015 运行库（已带运行库） VC2015_hauntek版支持EXE和DLL静态编译，DLL公开的子程序名称必须是英文不能是中文！（否则无法识别公开的中文子程序名称而出现错误）支持系统核心支持库等,应用接口支持库不支持（其他支持库你们自行去测试），开发者电脑必须是 Windows 7 SP1 或以上，同时要安装 VC2015 x86 运行库，用户电脑则不需要，只要是 Windows</description></item><item><title>如何编写高质量的易语言代码？</title><link>https://arae.cc/post/25654.html</link><pubDate>Sat, 25 Jun 2016 14:37:51 +0800</pubDate><guid>https://arae.cc/post/25654.html</guid><description>什么是一个高效的软件？一个高效的软件不仅应该比实现同样功能的软件运行得更快，还应该消耗更少的系统资源。程序的时间效率是指运行速度，空间效率是指程序占用内存或者外存的状况。另外程序的效率我们也可以分为全局效率和局部效率。全局效率是指站在整个系统的角度上考虑的效率，局部效率是指站在模块或函数角度上考虑的效率。 使用整数和长整数 提高代码运行速度最简单的方法莫过于使用正确的数据类型了。也许你不相信，但是 正确地选择数据类型可以大幅度提升代码的性能。在大多数情况下，程序员可以将短整数型、小数型和双精度小数型的变量替换为整数（Integer）或长整数（Long）类型的变量，因为易语言处理整数和长整数的能力远远高于处理其它几种数据类型。 在大多数情况下，程序员选择使用小数型或双精度小数型的原因是因为它们能够保存小数。但是小数也可以保存在整数类型的变量中。例如程序中约定有三位小数，那么只需要将保存在整数型变量中的数值除以1000就可以得到结果。根据我的经验，使用整数和长整数替代短整数型、小数型和双精度小数型后，代码的运行速度可以提高将近10倍。 但是我们也不要老是强调使用使用整数和长整数，因为在程序中数据类型</description></item><item><title>易语言5.5 IDE 全部接口模块 完整插件接口源码</title><link>https://arae.cc/post/25664.html</link><pubDate>Sat, 25 Jun 2016 14:07:45 +0800</pubDate><guid>https://arae.cc/post/25664.html</guid><description>前面的模块吧 编辑-替换指定文本（）的替换参数类型设置错误了应该是 替换参数 不是 参数信息 现在改正了。 下面有个支持库壳有简单的功能，可使用上面模块继续改造添加功能（有易语言工具菜单添加功能） /&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; 链接: http://pan.baidu.com/s/1mhSNK5y 密码: x7kt &amp;lsquo;模块 链接: http://pan.baidu.com/s/1eRXJJ5S 密码: pgwk</description></item><item><title>HP-socket 3.4.3 支持库 (高性能TCP/UDP通讯组件)预支持SSL</title><link>https://arae.cc/post/25644.html</link><pubDate>Sat, 25 Jun 2016 14:04:12 +0800</pubDate><guid>https://arae.cc/post/25644.html</guid><description>易语言的Demo在目录HP-Socket\Demo里面 HPsocket是一款免费的高性能通讯组件，经过本人测试，值得推荐给大家！！！ ( HPsocket的作者很重视易语言用户，对易语言的支持也做到了尽心尽责，不但提供了DLL的支持而且还提供了易语言支持库 ，感动~~~) HP-Socket 是一套通用的高性能 TCP/UDP 通信框架，包含服务端组件、客户端组件和Agent组件，广泛适用于各种不同应用场景的 TCP/UDP 通信系统。HP-Socket 对通信层实现完全封装，应用程序不必关注通信层的任何细节。 为了让使用者能方便快速地学习和使用 HP-Socket ，迅速掌握框架的设计思想和使用方法，特此精心制作了大量 Demo 示例（如：PUSH 模型示例、PULL 模型示例、PACK 模型示例、性能测试示例以及其它编程语言示例）。HP-Socket 目前运行在 Windows 平台，将来会实现跨平台支持。 链接: http://pan.baidu.com/s/1gfHIOnh 密码: 6ysw</description></item></channel></rss>